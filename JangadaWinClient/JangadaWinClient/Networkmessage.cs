// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Jangada {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Networkmessage {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Jangada_Networkmessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Networkmessage, global::Jangada.Networkmessage.Builder> internal__static_Jangada_Networkmessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_LoginPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.LoginPacket, global::Jangada.LoginPacket.Builder> internal__static_Jangada_LoginPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_Character__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Character, global::Jangada.Character.Builder> internal__static_Jangada_Character__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_CharactersPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.CharactersPacket, global::Jangada.CharactersPacket.Builder> internal__static_Jangada_CharactersPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_Messages__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Messages, global::Jangada.Messages.Builder> internal__static_Jangada_Messages__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Networkmessage() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChROZXR3b3JrbWVzc2FnZS5wcm90bxIHSmFuZ2FkYSK/AQoOTmV0d29ya21l" + 
            "c3NhZ2USKgoEdHlwZRgBIAIoDjIcLkphbmdhZGEuTmV0d29ya21lc3NhZ2Uu" + 
            "VHlwZRIpCgtsb2dpblBhY2tldBgCIAEoCzIULkphbmdhZGEuTG9naW5QYWNr" + 
            "ZXQSMwoQY2hhcmFjdGVyc1BhY2tldBgDIAEoCzIZLkphbmdhZGEuQ2hhcmFj" + 
            "dGVyc1BhY2tldCIhCgRUeXBlEgkKBUxPR0lOEAASDgoKQ0hBUkFDVEVSUxAB" + 
            "Ii4KC0xvZ2luUGFja2V0Eg0KBWxvZ2luGAEgAigJEhAKCHBhc3N3b3JkGAIg" + 
            "AigJIjMKCUNoYXJhY3RlchIKCgJpZBgBIAIoBRIMCgRuYW1lGAIgAigJEgwK" + 
            "BGluZm8YAyACKAkiPQoQQ2hhcmFjdGVyc1BhY2tldBIpCg1DaGFyYWN0ZXJM" + 
            "aXN0GAEgAygLMhIuSmFuZ2FkYS5DaGFyYWN0ZXIiOwoITWVzc2FnZXMSLwoO" + 
            "TmV0d29ya21lc3NhZ2UYASADKAsyFy5KYW5nYWRhLk5ldHdvcmttZXNzYWdl" + 
            "QgJIAQ==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Jangada_Networkmessage__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Jangada_Networkmessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Networkmessage, global::Jangada.Networkmessage.Builder>(internal__static_Jangada_Networkmessage__Descriptor,
                  new string[] { "Type", "LoginPacket", "CharactersPacket", });
          internal__static_Jangada_LoginPacket__Descriptor = Descriptor.MessageTypes[1];
          internal__static_Jangada_LoginPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.LoginPacket, global::Jangada.LoginPacket.Builder>(internal__static_Jangada_LoginPacket__Descriptor,
                  new string[] { "Login", "Password", });
          internal__static_Jangada_Character__Descriptor = Descriptor.MessageTypes[2];
          internal__static_Jangada_Character__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Character, global::Jangada.Character.Builder>(internal__static_Jangada_Character__Descriptor,
                  new string[] { "Id", "Name", "Info", });
          internal__static_Jangada_CharactersPacket__Descriptor = Descriptor.MessageTypes[3];
          internal__static_Jangada_CharactersPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.CharactersPacket, global::Jangada.CharactersPacket.Builder>(internal__static_Jangada_CharactersPacket__Descriptor,
                  new string[] { "CharacterList", });
          internal__static_Jangada_Messages__Descriptor = Descriptor.MessageTypes[4];
          internal__static_Jangada_Messages__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Messages, global::Jangada.Messages.Builder>(internal__static_Jangada_Messages__Descriptor,
                  new string[] { "Networkmessage", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Networkmessage : pb::GeneratedMessage<Networkmessage, Networkmessage.Builder> {
    private Networkmessage() { }
    private static readonly Networkmessage defaultInstance = new Networkmessage().MakeReadOnly();
    private static readonly string[] _networkmessageFieldNames = new string[] { "charactersPacket", "loginPacket", "type" };
    private static readonly uint[] _networkmessageFieldTags = new uint[] { 26, 18, 8 };
    public static Networkmessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Networkmessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Networkmessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Networkmessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Networkmessage, Networkmessage.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Networkmessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        LOGIN = 0,
        CHARACTERS = 1,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Jangada.Networkmessage.Types.Type type_ = global::Jangada.Networkmessage.Types.Type.LOGIN;
    public bool HasType {
      get { return hasType; }
    }
    public global::Jangada.Networkmessage.Types.Type Type {
      get { return type_; }
    }
    
    public const int LoginPacketFieldNumber = 2;
    private bool hasLoginPacket;
    private global::Jangada.LoginPacket loginPacket_;
    public bool HasLoginPacket {
      get { return hasLoginPacket; }
    }
    public global::Jangada.LoginPacket LoginPacket {
      get { return loginPacket_ ?? global::Jangada.LoginPacket.DefaultInstance; }
    }
    
    public const int CharactersPacketFieldNumber = 3;
    private bool hasCharactersPacket;
    private global::Jangada.CharactersPacket charactersPacket_;
    public bool HasCharactersPacket {
      get { return hasCharactersPacket; }
    }
    public global::Jangada.CharactersPacket CharactersPacket {
      get { return charactersPacket_ ?? global::Jangada.CharactersPacket.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasLoginPacket) {
          if (!LoginPacket.IsInitialized) return false;
        }
        if (HasCharactersPacket) {
          if (!CharactersPacket.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _networkmessageFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasLoginPacket) {
        output.WriteMessage(2, field_names[1], LoginPacket);
      }
      if (hasCharactersPacket) {
        output.WriteMessage(3, field_names[0], CharactersPacket);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasLoginPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, LoginPacket);
        }
        if (hasCharactersPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CharactersPacket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Networkmessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Networkmessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Networkmessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Networkmessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Networkmessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Networkmessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Networkmessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Networkmessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Networkmessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Networkmessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Networkmessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Networkmessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Networkmessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Networkmessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Networkmessage result;
      
      private Networkmessage PrepareBuilder() {
        if (resultIsReadOnly) {
          Networkmessage original = result;
          result = new Networkmessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Networkmessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Networkmessage.Descriptor; }
      }
      
      public override Networkmessage DefaultInstanceForType {
        get { return global::Jangada.Networkmessage.DefaultInstance; }
      }
      
      public override Networkmessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Networkmessage) {
          return MergeFrom((Networkmessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Networkmessage other) {
        if (other == global::Jangada.Networkmessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasLoginPacket) {
          MergeLoginPacket(other.LoginPacket);
        }
        if (other.HasCharactersPacket) {
          MergeCharactersPacket(other.CharactersPacket);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_networkmessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _networkmessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Jangada.LoginPacket.Builder subBuilder = global::Jangada.LoginPacket.CreateBuilder();
              if (result.hasLoginPacket) {
                subBuilder.MergeFrom(LoginPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LoginPacket = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Jangada.CharactersPacket.Builder subBuilder = global::Jangada.CharactersPacket.CreateBuilder();
              if (result.hasCharactersPacket) {
                subBuilder.MergeFrom(CharactersPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CharactersPacket = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Jangada.Networkmessage.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Jangada.Networkmessage.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Jangada.Networkmessage.Types.Type.LOGIN;
        return this;
      }
      
      public bool HasLoginPacket {
       get { return result.hasLoginPacket; }
      }
      public global::Jangada.LoginPacket LoginPacket {
        get { return result.LoginPacket; }
        set { SetLoginPacket(value); }
      }
      public Builder SetLoginPacket(global::Jangada.LoginPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLoginPacket = true;
        result.loginPacket_ = value;
        return this;
      }
      public Builder SetLoginPacket(global::Jangada.LoginPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLoginPacket = true;
        result.loginPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLoginPacket(global::Jangada.LoginPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLoginPacket &&
            result.loginPacket_ != global::Jangada.LoginPacket.DefaultInstance) {
            result.loginPacket_ = global::Jangada.LoginPacket.CreateBuilder(result.loginPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.loginPacket_ = value;
        }
        result.hasLoginPacket = true;
        return this;
      }
      public Builder ClearLoginPacket() {
        PrepareBuilder();
        result.hasLoginPacket = false;
        result.loginPacket_ = null;
        return this;
      }
      
      public bool HasCharactersPacket {
       get { return result.hasCharactersPacket; }
      }
      public global::Jangada.CharactersPacket CharactersPacket {
        get { return result.CharactersPacket; }
        set { SetCharactersPacket(value); }
      }
      public Builder SetCharactersPacket(global::Jangada.CharactersPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharactersPacket = true;
        result.charactersPacket_ = value;
        return this;
      }
      public Builder SetCharactersPacket(global::Jangada.CharactersPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharactersPacket = true;
        result.charactersPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharactersPacket(global::Jangada.CharactersPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharactersPacket &&
            result.charactersPacket_ != global::Jangada.CharactersPacket.DefaultInstance) {
            result.charactersPacket_ = global::Jangada.CharactersPacket.CreateBuilder(result.charactersPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.charactersPacket_ = value;
        }
        result.hasCharactersPacket = true;
        return this;
      }
      public Builder ClearCharactersPacket() {
        PrepareBuilder();
        result.hasCharactersPacket = false;
        result.charactersPacket_ = null;
        return this;
      }
    }
    static Networkmessage() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginPacket : pb::GeneratedMessage<LoginPacket, LoginPacket.Builder> {
    private LoginPacket() { }
    private static readonly LoginPacket defaultInstance = new LoginPacket().MakeReadOnly();
    private static readonly string[] _loginPacketFieldNames = new string[] { "login", "password" };
    private static readonly uint[] _loginPacketFieldTags = new uint[] { 10, 18 };
    public static LoginPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_LoginPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginPacket, LoginPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_LoginPacket__FieldAccessorTable; }
    }
    
    public const int LoginFieldNumber = 1;
    private bool hasLogin;
    private string login_ = "";
    public bool HasLogin {
      get { return hasLogin; }
    }
    public string Login {
      get { return login_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLogin) return false;
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginPacketFieldNames;
      if (hasLogin) {
        output.WriteString(1, field_names[0], Login);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[1], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLogin) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Login);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginPacket result;
      
      private LoginPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginPacket original = result;
          result = new LoginPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.LoginPacket.Descriptor; }
      }
      
      public override LoginPacket DefaultInstanceForType {
        get { return global::Jangada.LoginPacket.DefaultInstance; }
      }
      
      public override LoginPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginPacket) {
          return MergeFrom((LoginPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginPacket other) {
        if (other == global::Jangada.LoginPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLogin) {
          Login = other.Login;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLogin = input.ReadString(ref result.login_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLogin {
        get { return result.hasLogin; }
      }
      public string Login {
        get { return result.Login; }
        set { SetLogin(value); }
      }
      public Builder SetLogin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = value;
        return this;
      }
      public Builder ClearLogin() {
        PrepareBuilder();
        result.hasLogin = false;
        result.login_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static LoginPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Character : pb::GeneratedMessage<Character, Character.Builder> {
    private Character() { }
    private static readonly Character defaultInstance = new Character().MakeReadOnly();
    private static readonly string[] _characterFieldNames = new string[] { "id", "info", "name" };
    private static readonly uint[] _characterFieldTags = new uint[] { 8, 26, 18 };
    public static Character DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Character DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Character ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Character__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Character, Character.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Character__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int InfoFieldNumber = 3;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasInfo) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _characterFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasInfo) {
        output.WriteString(3, field_names[1], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Character ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Character ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Character ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Character ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Character ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Character ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Character ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Character ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Character ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Character ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Character MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Character prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Character, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Character cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Character result;
      
      private Character PrepareBuilder() {
        if (resultIsReadOnly) {
          Character original = result;
          result = new Character();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Character MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Character.Descriptor; }
      }
      
      public override Character DefaultInstanceForType {
        get { return global::Jangada.Character.DefaultInstance; }
      }
      
      public override Character BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Character) {
          return MergeFrom((Character) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Character other) {
        if (other == global::Jangada.Character.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_characterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _characterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
    }
    static Character() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CharactersPacket : pb::GeneratedMessage<CharactersPacket, CharactersPacket.Builder> {
    private CharactersPacket() { }
    private static readonly CharactersPacket defaultInstance = new CharactersPacket().MakeReadOnly();
    private static readonly string[] _charactersPacketFieldNames = new string[] { "CharacterList" };
    private static readonly uint[] _charactersPacketFieldTags = new uint[] { 10 };
    public static CharactersPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CharactersPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CharactersPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CharactersPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CharactersPacket, CharactersPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CharactersPacket__FieldAccessorTable; }
    }
    
    public const int CharacterListFieldNumber = 1;
    private pbc::PopsicleList<global::Jangada.Character> characterList_ = new pbc::PopsicleList<global::Jangada.Character>();
    public scg::IList<global::Jangada.Character> CharacterListList {
      get { return characterList_; }
    }
    public int CharacterListCount {
      get { return characterList_.Count; }
    }
    public global::Jangada.Character GetCharacterList(int index) {
      return characterList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Jangada.Character element in CharacterListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _charactersPacketFieldNames;
      if (characterList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], characterList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Jangada.Character element in CharacterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CharactersPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CharactersPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CharactersPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CharactersPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CharactersPacket MakeReadOnly() {
      characterList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CharactersPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CharactersPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CharactersPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CharactersPacket result;
      
      private CharactersPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          CharactersPacket original = result;
          result = new CharactersPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CharactersPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.CharactersPacket.Descriptor; }
      }
      
      public override CharactersPacket DefaultInstanceForType {
        get { return global::Jangada.CharactersPacket.DefaultInstance; }
      }
      
      public override CharactersPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CharactersPacket) {
          return MergeFrom((CharactersPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CharactersPacket other) {
        if (other == global::Jangada.CharactersPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.characterList_.Count != 0) {
          result.characterList_.Add(other.characterList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_charactersPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _charactersPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.characterList_, global::Jangada.Character.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Jangada.Character> CharacterListList {
        get { return PrepareBuilder().characterList_; }
      }
      public int CharacterListCount {
        get { return result.CharacterListCount; }
      }
      public global::Jangada.Character GetCharacterList(int index) {
        return result.GetCharacterList(index);
      }
      public Builder SetCharacterList(int index, global::Jangada.Character value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.characterList_[index] = value;
        return this;
      }
      public Builder SetCharacterList(int index, global::Jangada.Character.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.characterList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCharacterList(global::Jangada.Character value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.characterList_.Add(value);
        return this;
      }
      public Builder AddCharacterList(global::Jangada.Character.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.characterList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCharacterList(scg::IEnumerable<global::Jangada.Character> values) {
        PrepareBuilder();
        result.characterList_.Add(values);
        return this;
      }
      public Builder ClearCharacterList() {
        PrepareBuilder();
        result.characterList_.Clear();
        return this;
      }
    }
    static CharactersPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Messages : pb::GeneratedMessage<Messages, Messages.Builder> {
    private Messages() { }
    private static readonly Messages defaultInstance = new Messages().MakeReadOnly();
    private static readonly string[] _messagesFieldNames = new string[] { "Networkmessage" };
    private static readonly uint[] _messagesFieldTags = new uint[] { 10 };
    public static Messages DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Messages DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Messages ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Messages__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Messages, Messages.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Messages__FieldAccessorTable; }
    }
    
    public const int NetworkmessageFieldNumber = 1;
    private pbc::PopsicleList<global::Jangada.Networkmessage> networkmessage_ = new pbc::PopsicleList<global::Jangada.Networkmessage>();
    public scg::IList<global::Jangada.Networkmessage> NetworkmessageList {
      get { return networkmessage_; }
    }
    public int NetworkmessageCount {
      get { return networkmessage_.Count; }
    }
    public global::Jangada.Networkmessage GetNetworkmessage(int index) {
      return networkmessage_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Jangada.Networkmessage element in NetworkmessageList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messagesFieldNames;
      if (networkmessage_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], networkmessage_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Jangada.Networkmessage element in NetworkmessageList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Messages ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Messages ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Messages ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Messages ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Messages ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Messages ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Messages ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Messages ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Messages ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Messages ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Messages MakeReadOnly() {
      networkmessage_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Messages prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Messages, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Messages cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Messages result;
      
      private Messages PrepareBuilder() {
        if (resultIsReadOnly) {
          Messages original = result;
          result = new Messages();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Messages MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Messages.Descriptor; }
      }
      
      public override Messages DefaultInstanceForType {
        get { return global::Jangada.Messages.DefaultInstance; }
      }
      
      public override Messages BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Messages) {
          return MergeFrom((Messages) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Messages other) {
        if (other == global::Jangada.Messages.DefaultInstance) return this;
        PrepareBuilder();
        if (other.networkmessage_.Count != 0) {
          result.networkmessage_.Add(other.networkmessage_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messagesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messagesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.networkmessage_, global::Jangada.Networkmessage.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Jangada.Networkmessage> NetworkmessageList {
        get { return PrepareBuilder().networkmessage_; }
      }
      public int NetworkmessageCount {
        get { return result.NetworkmessageCount; }
      }
      public global::Jangada.Networkmessage GetNetworkmessage(int index) {
        return result.GetNetworkmessage(index);
      }
      public Builder SetNetworkmessage(int index, global::Jangada.Networkmessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.networkmessage_[index] = value;
        return this;
      }
      public Builder SetNetworkmessage(int index, global::Jangada.Networkmessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.networkmessage_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNetworkmessage(global::Jangada.Networkmessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.networkmessage_.Add(value);
        return this;
      }
      public Builder AddNetworkmessage(global::Jangada.Networkmessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.networkmessage_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNetworkmessage(scg::IEnumerable<global::Jangada.Networkmessage> values) {
        PrepareBuilder();
        result.networkmessage_.Add(values);
        return this;
      }
      public Builder ClearNetworkmessage() {
        PrepareBuilder();
        result.networkmessage_.Clear();
        return this;
      }
    }
    static Messages() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
