// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Jangada {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Networkmessage {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Jangada_Networkmessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Networkmessage, global::Jangada.Networkmessage.Builder> internal__static_Jangada_Networkmessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_LoginPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.LoginPacket, global::Jangada.LoginPacket.Builder> internal__static_Jangada_LoginPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_Character__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Character, global::Jangada.Character.Builder> internal__static_Jangada_Character__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_CharactersPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.CharactersPacket, global::Jangada.CharactersPacket.Builder> internal__static_Jangada_CharactersPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_SelectCharacterPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.SelectCharacterPacket, global::Jangada.SelectCharacterPacket.Builder> internal__static_Jangada_SelectCharacterPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_Position__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Position, global::Jangada.Position.Builder> internal__static_Jangada_Position__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_QuaternionMessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.QuaternionMessage, global::Jangada.QuaternionMessage.Builder> internal__static_Jangada_QuaternionMessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_RequestMovementPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.RequestMovementPacket, global::Jangada.RequestMovementPacket.Builder> internal__static_Jangada_RequestMovementPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_AreaDescriptionPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.AreaDescriptionPacket, global::Jangada.AreaDescriptionPacket.Builder> internal__static_Jangada_AreaDescriptionPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_CreatureRespawnPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.CreatureRespawnPacket, global::Jangada.CreatureRespawnPacket.Builder> internal__static_Jangada_CreatureRespawnPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_CreatureDescription__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.CreatureDescription, global::Jangada.CreatureDescription.Builder> internal__static_Jangada_CreatureDescription__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_PlayerDescription__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerDescription, global::Jangada.PlayerDescription.Builder> internal__static_Jangada_PlayerDescription__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_StatsDescription__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.StatsDescription, global::Jangada.StatsDescription.Builder> internal__static_Jangada_StatsDescription__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_SkillsDescription__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.SkillsDescription, global::Jangada.SkillsDescription.Builder> internal__static_Jangada_SkillsDescription__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_PlayerLoginPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerLoginPacket, global::Jangada.PlayerLoginPacket.Builder> internal__static_Jangada_PlayerLoginPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_PlayerMovementPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerMovementPacket, global::Jangada.PlayerMovementPacket.Builder> internal__static_Jangada_PlayerMovementPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_CharacterMovementPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.CharacterMovementPacket, global::Jangada.CharacterMovementPacket.Builder> internal__static_Jangada_CharacterMovementPacket__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_Messages__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.Messages, global::Jangada.Messages.Builder> internal__static_Jangada_Messages__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Jangada_PlayerLogoutPacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerLogoutPacket, global::Jangada.PlayerLogoutPacket.Builder> internal__static_Jangada_PlayerLogoutPacket__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Networkmessage() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChROZXR3b3JrbWVzc2FnZS5wcm90bxIHSmFuZ2FkYSLSBgoOTmV0d29ya21l" + 
            "c3NhZ2USKgoEdHlwZRgBIAIoDjIcLkphbmdhZGEuTmV0d29ya21lc3NhZ2Uu" + 
            "VHlwZRIpCgtsb2dpblBhY2tldBgCIAEoCzIULkphbmdhZGEuTG9naW5QYWNr" + 
            "ZXQSMwoQY2hhcmFjdGVyc1BhY2tldBgDIAEoCzIZLkphbmdhZGEuQ2hhcmFj" + 
            "dGVyc1BhY2tldBI9ChVzZWxlY3RDaGFyYWN0ZXJQYWNrZXQYBCABKAsyHi5K" + 
            "YW5nYWRhLlNlbGVjdENoYXJhY3RlclBhY2tldBI9ChVhcmVhRGVzY3JpcHRp" + 
            "b25QYWNrZXQYBSABKAsyHi5KYW5nYWRhLkFyZWFEZXNjcmlwdGlvblBhY2tl" + 
            "dBI9ChVyZXF1ZXN0TW92ZW1lbnRQYWNrZXQYBiABKAsyHi5KYW5nYWRhLlJl" + 
            "cXVlc3RNb3ZlbWVudFBhY2tldBI7ChRwbGF5ZXJNb3ZlbWVudFBhY2tldBgH" + 
            "IAEoCzIdLkphbmdhZGEuUGxheWVyTW92ZW1lbnRQYWNrZXQSNQoRcGxheWVy" + 
            "TG9naW5QYWNrZXQYCCABKAsyGi5KYW5nYWRhLlBsYXllckxvZ2luUGFja2V0" + 
            "EkEKF2NoYXJhY3Rlck1vdmVtZW50UGFja2V0GAkgASgLMiAuSmFuZ2FkYS5D" + 
            "aGFyYWN0ZXJNb3ZlbWVudFBhY2tldBI3ChJwbGF5ZXJMb2dvdXRQYWNrZXQY" + 
            "CiABKAsyGy5KYW5nYWRhLlBsYXllckxvZ291dFBhY2tldBI9ChVjcmVhdHVy" + 
            "ZVJlc3Bhd25QYWNrZXQYCyABKAsyHi5KYW5nYWRhLkNyZWF0dXJlUmVzcGF3" + 
            "blBhY2tldCLHAQoEVHlwZRIJCgVMT0dJThAAEg4KCkNIQVJBQ1RFUlMQARIQ" + 
            "CgxTRUxFQ1RFRENIQVIQAhIUChBBUkVBX0RFU0NSSVBUSU9OEAMSFAoQUkVR" + 
            "VUVTVF9NT1ZFTUVOVBAEEhMKD1BMQVlFUl9NT1ZFTUVOVBAFEhAKDFBMQVlF" + 
            "Ul9MT0dJThAGEhYKEkNIQVJBQ1RFUl9NT1ZFTUVOVBAHEhEKDVBMQVlFUl9M" + 
            "T0dPVVQQCBIUChBDUkVBVFVSRV9SRVNQQVdOEAkiLgoLTG9naW5QYWNrZXQS" + 
            "DQoFbG9naW4YASACKAkSEAoIcGFzc3dvcmQYAiACKAkiMwoJQ2hhcmFjdGVy" + 
            "EgoKAmlkGAEgAigFEgwKBG5hbWUYAiACKAkSDAoEaW5mbxgDIAIoCSI9ChBD" + 
            "aGFyYWN0ZXJzUGFja2V0EikKDUNoYXJhY3Rlckxpc3QYASADKAsyEi5KYW5n" + 
            "YWRhLkNoYXJhY3RlciIjChVTZWxlY3RDaGFyYWN0ZXJQYWNrZXQSCgoCaWQY" + 
            "ASACKAUiKwoIUG9zaXRpb24SCQoBeBgBIAIoAhIJCgF5GAIgAigCEgkKAXoY" + 
            "AyACKAIiPwoRUXVhdGVybmlvbk1lc3NhZ2USCQoBdxgBIAIoAhIJCgF4GAIg" + 
            "AigCEgkKAXkYAyACKAISCQoBehgEIAIoAiKfAQoVUmVxdWVzdE1vdmVtZW50" + 
            "UGFja2V0EkEKDG1vdmVtZW50VHlwZRgBIAIoDjIrLkphbmdhZGEuUmVxdWVz" + 
            "dE1vdmVtZW50UGFja2V0Lk1vdmVtZW50VHlwZRIPCgdhbW1vdW50GAIgAigC" + 
            "IjIKDE1vdmVtZW50VHlwZRILCgdGT1JXQVJEEAESDAoIQkFDS1dBUkQQAhIH" + 
            "CgNZQVcQAyKxAQoVQXJlYURlc2NyaXB0aW9uUGFja2V0Eg4KBmFyZWFJZBgB" + 
            "IAIoBRIqCgZwbGF5ZXIYAiACKAsyGi5KYW5nYWRhLlBsYXllckRlc2NyaXB0" + 
            "aW9uEisKB3BsYXllcnMYAyADKAsyGi5KYW5nYWRhLlBsYXllckRlc2NyaXB0" + 
            "aW9uEi8KCWNyZWF0dXJlcxgEIAMoCzIcLkphbmdhZGEuQ3JlYXR1cmVEZXNj" + 
            "cmlwdGlvbiJSChVDcmVhdHVyZVJlc3Bhd25QYWNrZXQSOQoTY3JlYXR1cmVE" + 
            "ZXNjcmlwdGlvbhgBIAIoCzIcLkphbmdhZGEuQ3JlYXR1cmVEZXNjcmlwdGlv" + 
            "biL1AQoTQ3JlYXR1cmVEZXNjcmlwdGlvbhIUCgxjcmVhdHVyZUd1aWQYASAC" + 
            "KAkSDwoHbW9kZWxJZBgCIAIoBRIrChBjcmVhdHVyZVBvc2l0aW9uGAMgAigL" + 
            "MhEuSmFuZ2FkYS5Qb3NpdGlvbhI0ChBjcmVhdHVyZVJvdGF0aW9uGAQgAigL" + 
            "MhouSmFuZ2FkYS5RdWF0ZXJuaW9uTWVzc2FnZRIoCgVzdGF0cxgFIAIoCzIZ" + 
            "LkphbmdhZGEuU3RhdHNEZXNjcmlwdGlvbhIqCgZza2lsbHMYBiADKAsyGi5K" + 
            "YW5nYWRhLlNraWxsc0Rlc2NyaXB0aW9uItwBChFQbGF5ZXJEZXNjcmlwdGlv" + 
            "bhISCgpwbGF5ZXJHdWlkGAEgAigJEikKDnBsYXllclBvc2l0aW9uGAIgAigL" + 
            "MhEuSmFuZ2FkYS5Qb3NpdGlvbhIyCg5wbGF5ZXJSb3RhdGlvbhgDIAIoCzIa" + 
            "LkphbmdhZGEuUXVhdGVybmlvbk1lc3NhZ2USKAoFc3RhdHMYBCACKAsyGS5K" + 
            "YW5nYWRhLlN0YXRzRGVzY3JpcHRpb24SKgoGc2tpbGxzGAUgAygLMhouSmFu" + 
            "Z2FkYS5Ta2lsbHNEZXNjcmlwdGlvbiJsChBTdGF0c0Rlc2NyaXB0aW9uEgwK" + 
            "BENPTlMYASACKAUSCwoDU1RSGAIgAigFEgsKA0lOVBgDIAIoBRILCgNXSVMY" + 
            "BCACKAUSCwoDREVYGAUgAigFEgoKAkhQGAYgAigFEgoKAk1QGAcgAigFImoK" + 
            "EVNraWxsc0Rlc2NyaXB0aW9uEgwKBE5hbWUYASACKAkSEQoJVGV4dHVyZUlk" + 
            "GAIgAigFEhAKCENvb2xEb3duGAMgAigCEhAKCERpc3RhbmNlGAQgAigCEhAK" + 
            "CEF1dG9DYXN0GAUgAigIIj8KEVBsYXllckxvZ2luUGFja2V0EioKBnBsYXll" + 
            "chgBIAIoCzIaLkphbmdhZGEuUGxheWVyRGVzY3JpcHRpb24ibwoUUGxheWVy" + 
            "TW92ZW1lbnRQYWNrZXQSJgoLbmV3UG9zaXRpb24YASACKAsyES5KYW5nYWRh" + 
            "LlBvc2l0aW9uEi8KC25ld1JvdGF0aW9uGAIgAigLMhouSmFuZ2FkYS5RdWF0" + 
            "ZXJuaW9uTWVzc2FnZSJFChdDaGFyYWN0ZXJNb3ZlbWVudFBhY2tldBIqCgZw" + 
            "bGF5ZXIYASACKAsyGi5KYW5nYWRhLlBsYXllckRlc2NyaXB0aW9uIjsKCE1l" + 
            "c3NhZ2VzEi8KDk5ldHdvcmttZXNzYWdlGAEgAygLMhcuSmFuZ2FkYS5OZXR3" + 
            "b3JrbWVzc2FnZSIoChJQbGF5ZXJMb2dvdXRQYWNrZXQSEgoKcGxheWVyR3Vp" + 
            "ZBgBIAIoCUICSAE=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Jangada_Networkmessage__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Jangada_Networkmessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Networkmessage, global::Jangada.Networkmessage.Builder>(internal__static_Jangada_Networkmessage__Descriptor,
                  new string[] { "Type", "LoginPacket", "CharactersPacket", "SelectCharacterPacket", "AreaDescriptionPacket", "RequestMovementPacket", "PlayerMovementPacket", "PlayerLoginPacket", "CharacterMovementPacket", "PlayerLogoutPacket", "CreatureRespawnPacket", });
          internal__static_Jangada_LoginPacket__Descriptor = Descriptor.MessageTypes[1];
          internal__static_Jangada_LoginPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.LoginPacket, global::Jangada.LoginPacket.Builder>(internal__static_Jangada_LoginPacket__Descriptor,
                  new string[] { "Login", "Password", });
          internal__static_Jangada_Character__Descriptor = Descriptor.MessageTypes[2];
          internal__static_Jangada_Character__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Character, global::Jangada.Character.Builder>(internal__static_Jangada_Character__Descriptor,
                  new string[] { "Id", "Name", "Info", });
          internal__static_Jangada_CharactersPacket__Descriptor = Descriptor.MessageTypes[3];
          internal__static_Jangada_CharactersPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.CharactersPacket, global::Jangada.CharactersPacket.Builder>(internal__static_Jangada_CharactersPacket__Descriptor,
                  new string[] { "CharacterList", });
          internal__static_Jangada_SelectCharacterPacket__Descriptor = Descriptor.MessageTypes[4];
          internal__static_Jangada_SelectCharacterPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.SelectCharacterPacket, global::Jangada.SelectCharacterPacket.Builder>(internal__static_Jangada_SelectCharacterPacket__Descriptor,
                  new string[] { "Id", });
          internal__static_Jangada_Position__Descriptor = Descriptor.MessageTypes[5];
          internal__static_Jangada_Position__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Position, global::Jangada.Position.Builder>(internal__static_Jangada_Position__Descriptor,
                  new string[] { "X", "Y", "Z", });
          internal__static_Jangada_QuaternionMessage__Descriptor = Descriptor.MessageTypes[6];
          internal__static_Jangada_QuaternionMessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.QuaternionMessage, global::Jangada.QuaternionMessage.Builder>(internal__static_Jangada_QuaternionMessage__Descriptor,
                  new string[] { "W", "X", "Y", "Z", });
          internal__static_Jangada_RequestMovementPacket__Descriptor = Descriptor.MessageTypes[7];
          internal__static_Jangada_RequestMovementPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.RequestMovementPacket, global::Jangada.RequestMovementPacket.Builder>(internal__static_Jangada_RequestMovementPacket__Descriptor,
                  new string[] { "MovementType", "Ammount", });
          internal__static_Jangada_AreaDescriptionPacket__Descriptor = Descriptor.MessageTypes[8];
          internal__static_Jangada_AreaDescriptionPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.AreaDescriptionPacket, global::Jangada.AreaDescriptionPacket.Builder>(internal__static_Jangada_AreaDescriptionPacket__Descriptor,
                  new string[] { "AreaId", "Player", "Players", "Creatures", });
          internal__static_Jangada_CreatureRespawnPacket__Descriptor = Descriptor.MessageTypes[9];
          internal__static_Jangada_CreatureRespawnPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.CreatureRespawnPacket, global::Jangada.CreatureRespawnPacket.Builder>(internal__static_Jangada_CreatureRespawnPacket__Descriptor,
                  new string[] { "CreatureDescription", });
          internal__static_Jangada_CreatureDescription__Descriptor = Descriptor.MessageTypes[10];
          internal__static_Jangada_CreatureDescription__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.CreatureDescription, global::Jangada.CreatureDescription.Builder>(internal__static_Jangada_CreatureDescription__Descriptor,
                  new string[] { "CreatureGuid", "ModelId", "CreaturePosition", "CreatureRotation", "Stats", "Skills", });
          internal__static_Jangada_PlayerDescription__Descriptor = Descriptor.MessageTypes[11];
          internal__static_Jangada_PlayerDescription__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerDescription, global::Jangada.PlayerDescription.Builder>(internal__static_Jangada_PlayerDescription__Descriptor,
                  new string[] { "PlayerGuid", "PlayerPosition", "PlayerRotation", "Stats", "Skills", });
          internal__static_Jangada_StatsDescription__Descriptor = Descriptor.MessageTypes[12];
          internal__static_Jangada_StatsDescription__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.StatsDescription, global::Jangada.StatsDescription.Builder>(internal__static_Jangada_StatsDescription__Descriptor,
                  new string[] { "CONS", "STR", "INT", "WIS", "DEX", "HP", "MP", });
          internal__static_Jangada_SkillsDescription__Descriptor = Descriptor.MessageTypes[13];
          internal__static_Jangada_SkillsDescription__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.SkillsDescription, global::Jangada.SkillsDescription.Builder>(internal__static_Jangada_SkillsDescription__Descriptor,
                  new string[] { "Name", "TextureId", "CoolDown", "Distance", "AutoCast", });
          internal__static_Jangada_PlayerLoginPacket__Descriptor = Descriptor.MessageTypes[14];
          internal__static_Jangada_PlayerLoginPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerLoginPacket, global::Jangada.PlayerLoginPacket.Builder>(internal__static_Jangada_PlayerLoginPacket__Descriptor,
                  new string[] { "Player", });
          internal__static_Jangada_PlayerMovementPacket__Descriptor = Descriptor.MessageTypes[15];
          internal__static_Jangada_PlayerMovementPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerMovementPacket, global::Jangada.PlayerMovementPacket.Builder>(internal__static_Jangada_PlayerMovementPacket__Descriptor,
                  new string[] { "NewPosition", "NewRotation", });
          internal__static_Jangada_CharacterMovementPacket__Descriptor = Descriptor.MessageTypes[16];
          internal__static_Jangada_CharacterMovementPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.CharacterMovementPacket, global::Jangada.CharacterMovementPacket.Builder>(internal__static_Jangada_CharacterMovementPacket__Descriptor,
                  new string[] { "Player", });
          internal__static_Jangada_Messages__Descriptor = Descriptor.MessageTypes[17];
          internal__static_Jangada_Messages__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.Messages, global::Jangada.Messages.Builder>(internal__static_Jangada_Messages__Descriptor,
                  new string[] { "Networkmessage", });
          internal__static_Jangada_PlayerLogoutPacket__Descriptor = Descriptor.MessageTypes[18];
          internal__static_Jangada_PlayerLogoutPacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Jangada.PlayerLogoutPacket, global::Jangada.PlayerLogoutPacket.Builder>(internal__static_Jangada_PlayerLogoutPacket__Descriptor,
                  new string[] { "PlayerGuid", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Networkmessage : pb::GeneratedMessage<Networkmessage, Networkmessage.Builder> {
    private Networkmessage() { }
    private static readonly Networkmessage defaultInstance = new Networkmessage().MakeReadOnly();
    private static readonly string[] _networkmessageFieldNames = new string[] { "areaDescriptionPacket", "characterMovementPacket", "charactersPacket", "creatureRespawnPacket", "loginPacket", "playerLoginPacket", "playerLogoutPacket", "playerMovementPacket", "requestMovementPacket", "selectCharacterPacket", "type" };
    private static readonly uint[] _networkmessageFieldTags = new uint[] { 42, 74, 26, 90, 18, 66, 82, 58, 50, 34, 8 };
    public static Networkmessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Networkmessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Networkmessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Networkmessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Networkmessage, Networkmessage.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Networkmessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        LOGIN = 0,
        CHARACTERS = 1,
        SELECTEDCHAR = 2,
        AREA_DESCRIPTION = 3,
        REQUEST_MOVEMENT = 4,
        PLAYER_MOVEMENT = 5,
        PLAYER_LOGIN = 6,
        CHARACTER_MOVEMENT = 7,
        PLAYER_LOGOUT = 8,
        CREATURE_RESPAWN = 9,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Jangada.Networkmessage.Types.Type type_ = global::Jangada.Networkmessage.Types.Type.LOGIN;
    public bool HasType {
      get { return hasType; }
    }
    public global::Jangada.Networkmessage.Types.Type Type {
      get { return type_; }
    }
    
    public const int LoginPacketFieldNumber = 2;
    private bool hasLoginPacket;
    private global::Jangada.LoginPacket loginPacket_;
    public bool HasLoginPacket {
      get { return hasLoginPacket; }
    }
    public global::Jangada.LoginPacket LoginPacket {
      get { return loginPacket_ ?? global::Jangada.LoginPacket.DefaultInstance; }
    }
    
    public const int CharactersPacketFieldNumber = 3;
    private bool hasCharactersPacket;
    private global::Jangada.CharactersPacket charactersPacket_;
    public bool HasCharactersPacket {
      get { return hasCharactersPacket; }
    }
    public global::Jangada.CharactersPacket CharactersPacket {
      get { return charactersPacket_ ?? global::Jangada.CharactersPacket.DefaultInstance; }
    }
    
    public const int SelectCharacterPacketFieldNumber = 4;
    private bool hasSelectCharacterPacket;
    private global::Jangada.SelectCharacterPacket selectCharacterPacket_;
    public bool HasSelectCharacterPacket {
      get { return hasSelectCharacterPacket; }
    }
    public global::Jangada.SelectCharacterPacket SelectCharacterPacket {
      get { return selectCharacterPacket_ ?? global::Jangada.SelectCharacterPacket.DefaultInstance; }
    }
    
    public const int AreaDescriptionPacketFieldNumber = 5;
    private bool hasAreaDescriptionPacket;
    private global::Jangada.AreaDescriptionPacket areaDescriptionPacket_;
    public bool HasAreaDescriptionPacket {
      get { return hasAreaDescriptionPacket; }
    }
    public global::Jangada.AreaDescriptionPacket AreaDescriptionPacket {
      get { return areaDescriptionPacket_ ?? global::Jangada.AreaDescriptionPacket.DefaultInstance; }
    }
    
    public const int RequestMovementPacketFieldNumber = 6;
    private bool hasRequestMovementPacket;
    private global::Jangada.RequestMovementPacket requestMovementPacket_;
    public bool HasRequestMovementPacket {
      get { return hasRequestMovementPacket; }
    }
    public global::Jangada.RequestMovementPacket RequestMovementPacket {
      get { return requestMovementPacket_ ?? global::Jangada.RequestMovementPacket.DefaultInstance; }
    }
    
    public const int PlayerMovementPacketFieldNumber = 7;
    private bool hasPlayerMovementPacket;
    private global::Jangada.PlayerMovementPacket playerMovementPacket_;
    public bool HasPlayerMovementPacket {
      get { return hasPlayerMovementPacket; }
    }
    public global::Jangada.PlayerMovementPacket PlayerMovementPacket {
      get { return playerMovementPacket_ ?? global::Jangada.PlayerMovementPacket.DefaultInstance; }
    }
    
    public const int PlayerLoginPacketFieldNumber = 8;
    private bool hasPlayerLoginPacket;
    private global::Jangada.PlayerLoginPacket playerLoginPacket_;
    public bool HasPlayerLoginPacket {
      get { return hasPlayerLoginPacket; }
    }
    public global::Jangada.PlayerLoginPacket PlayerLoginPacket {
      get { return playerLoginPacket_ ?? global::Jangada.PlayerLoginPacket.DefaultInstance; }
    }
    
    public const int CharacterMovementPacketFieldNumber = 9;
    private bool hasCharacterMovementPacket;
    private global::Jangada.CharacterMovementPacket characterMovementPacket_;
    public bool HasCharacterMovementPacket {
      get { return hasCharacterMovementPacket; }
    }
    public global::Jangada.CharacterMovementPacket CharacterMovementPacket {
      get { return characterMovementPacket_ ?? global::Jangada.CharacterMovementPacket.DefaultInstance; }
    }
    
    public const int PlayerLogoutPacketFieldNumber = 10;
    private bool hasPlayerLogoutPacket;
    private global::Jangada.PlayerLogoutPacket playerLogoutPacket_;
    public bool HasPlayerLogoutPacket {
      get { return hasPlayerLogoutPacket; }
    }
    public global::Jangada.PlayerLogoutPacket PlayerLogoutPacket {
      get { return playerLogoutPacket_ ?? global::Jangada.PlayerLogoutPacket.DefaultInstance; }
    }
    
    public const int CreatureRespawnPacketFieldNumber = 11;
    private bool hasCreatureRespawnPacket;
    private global::Jangada.CreatureRespawnPacket creatureRespawnPacket_;
    public bool HasCreatureRespawnPacket {
      get { return hasCreatureRespawnPacket; }
    }
    public global::Jangada.CreatureRespawnPacket CreatureRespawnPacket {
      get { return creatureRespawnPacket_ ?? global::Jangada.CreatureRespawnPacket.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasLoginPacket) {
          if (!LoginPacket.IsInitialized) return false;
        }
        if (HasCharactersPacket) {
          if (!CharactersPacket.IsInitialized) return false;
        }
        if (HasSelectCharacterPacket) {
          if (!SelectCharacterPacket.IsInitialized) return false;
        }
        if (HasAreaDescriptionPacket) {
          if (!AreaDescriptionPacket.IsInitialized) return false;
        }
        if (HasRequestMovementPacket) {
          if (!RequestMovementPacket.IsInitialized) return false;
        }
        if (HasPlayerMovementPacket) {
          if (!PlayerMovementPacket.IsInitialized) return false;
        }
        if (HasPlayerLoginPacket) {
          if (!PlayerLoginPacket.IsInitialized) return false;
        }
        if (HasCharacterMovementPacket) {
          if (!CharacterMovementPacket.IsInitialized) return false;
        }
        if (HasPlayerLogoutPacket) {
          if (!PlayerLogoutPacket.IsInitialized) return false;
        }
        if (HasCreatureRespawnPacket) {
          if (!CreatureRespawnPacket.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _networkmessageFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[10], (int) Type, Type);
      }
      if (hasLoginPacket) {
        output.WriteMessage(2, field_names[4], LoginPacket);
      }
      if (hasCharactersPacket) {
        output.WriteMessage(3, field_names[2], CharactersPacket);
      }
      if (hasSelectCharacterPacket) {
        output.WriteMessage(4, field_names[9], SelectCharacterPacket);
      }
      if (hasAreaDescriptionPacket) {
        output.WriteMessage(5, field_names[0], AreaDescriptionPacket);
      }
      if (hasRequestMovementPacket) {
        output.WriteMessage(6, field_names[8], RequestMovementPacket);
      }
      if (hasPlayerMovementPacket) {
        output.WriteMessage(7, field_names[7], PlayerMovementPacket);
      }
      if (hasPlayerLoginPacket) {
        output.WriteMessage(8, field_names[5], PlayerLoginPacket);
      }
      if (hasCharacterMovementPacket) {
        output.WriteMessage(9, field_names[1], CharacterMovementPacket);
      }
      if (hasPlayerLogoutPacket) {
        output.WriteMessage(10, field_names[6], PlayerLogoutPacket);
      }
      if (hasCreatureRespawnPacket) {
        output.WriteMessage(11, field_names[3], CreatureRespawnPacket);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasLoginPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, LoginPacket);
        }
        if (hasCharactersPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CharactersPacket);
        }
        if (hasSelectCharacterPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, SelectCharacterPacket);
        }
        if (hasAreaDescriptionPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, AreaDescriptionPacket);
        }
        if (hasRequestMovementPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, RequestMovementPacket);
        }
        if (hasPlayerMovementPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PlayerMovementPacket);
        }
        if (hasPlayerLoginPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, PlayerLoginPacket);
        }
        if (hasCharacterMovementPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, CharacterMovementPacket);
        }
        if (hasPlayerLogoutPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, PlayerLogoutPacket);
        }
        if (hasCreatureRespawnPacket) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, CreatureRespawnPacket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Networkmessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Networkmessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Networkmessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Networkmessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Networkmessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Networkmessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Networkmessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Networkmessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Networkmessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Networkmessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Networkmessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Networkmessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Networkmessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Networkmessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Networkmessage result;
      
      private Networkmessage PrepareBuilder() {
        if (resultIsReadOnly) {
          Networkmessage original = result;
          result = new Networkmessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Networkmessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Networkmessage.Descriptor; }
      }
      
      public override Networkmessage DefaultInstanceForType {
        get { return global::Jangada.Networkmessage.DefaultInstance; }
      }
      
      public override Networkmessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Networkmessage) {
          return MergeFrom((Networkmessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Networkmessage other) {
        if (other == global::Jangada.Networkmessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasLoginPacket) {
          MergeLoginPacket(other.LoginPacket);
        }
        if (other.HasCharactersPacket) {
          MergeCharactersPacket(other.CharactersPacket);
        }
        if (other.HasSelectCharacterPacket) {
          MergeSelectCharacterPacket(other.SelectCharacterPacket);
        }
        if (other.HasAreaDescriptionPacket) {
          MergeAreaDescriptionPacket(other.AreaDescriptionPacket);
        }
        if (other.HasRequestMovementPacket) {
          MergeRequestMovementPacket(other.RequestMovementPacket);
        }
        if (other.HasPlayerMovementPacket) {
          MergePlayerMovementPacket(other.PlayerMovementPacket);
        }
        if (other.HasPlayerLoginPacket) {
          MergePlayerLoginPacket(other.PlayerLoginPacket);
        }
        if (other.HasCharacterMovementPacket) {
          MergeCharacterMovementPacket(other.CharacterMovementPacket);
        }
        if (other.HasPlayerLogoutPacket) {
          MergePlayerLogoutPacket(other.PlayerLogoutPacket);
        }
        if (other.HasCreatureRespawnPacket) {
          MergeCreatureRespawnPacket(other.CreatureRespawnPacket);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_networkmessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _networkmessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Jangada.LoginPacket.Builder subBuilder = global::Jangada.LoginPacket.CreateBuilder();
              if (result.hasLoginPacket) {
                subBuilder.MergeFrom(LoginPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LoginPacket = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Jangada.CharactersPacket.Builder subBuilder = global::Jangada.CharactersPacket.CreateBuilder();
              if (result.hasCharactersPacket) {
                subBuilder.MergeFrom(CharactersPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CharactersPacket = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Jangada.SelectCharacterPacket.Builder subBuilder = global::Jangada.SelectCharacterPacket.CreateBuilder();
              if (result.hasSelectCharacterPacket) {
                subBuilder.MergeFrom(SelectCharacterPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SelectCharacterPacket = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Jangada.AreaDescriptionPacket.Builder subBuilder = global::Jangada.AreaDescriptionPacket.CreateBuilder();
              if (result.hasAreaDescriptionPacket) {
                subBuilder.MergeFrom(AreaDescriptionPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AreaDescriptionPacket = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Jangada.RequestMovementPacket.Builder subBuilder = global::Jangada.RequestMovementPacket.CreateBuilder();
              if (result.hasRequestMovementPacket) {
                subBuilder.MergeFrom(RequestMovementPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestMovementPacket = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Jangada.PlayerMovementPacket.Builder subBuilder = global::Jangada.PlayerMovementPacket.CreateBuilder();
              if (result.hasPlayerMovementPacket) {
                subBuilder.MergeFrom(PlayerMovementPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerMovementPacket = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Jangada.PlayerLoginPacket.Builder subBuilder = global::Jangada.PlayerLoginPacket.CreateBuilder();
              if (result.hasPlayerLoginPacket) {
                subBuilder.MergeFrom(PlayerLoginPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerLoginPacket = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Jangada.CharacterMovementPacket.Builder subBuilder = global::Jangada.CharacterMovementPacket.CreateBuilder();
              if (result.hasCharacterMovementPacket) {
                subBuilder.MergeFrom(CharacterMovementPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CharacterMovementPacket = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Jangada.PlayerLogoutPacket.Builder subBuilder = global::Jangada.PlayerLogoutPacket.CreateBuilder();
              if (result.hasPlayerLogoutPacket) {
                subBuilder.MergeFrom(PlayerLogoutPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerLogoutPacket = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Jangada.CreatureRespawnPacket.Builder subBuilder = global::Jangada.CreatureRespawnPacket.CreateBuilder();
              if (result.hasCreatureRespawnPacket) {
                subBuilder.MergeFrom(CreatureRespawnPacket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreatureRespawnPacket = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Jangada.Networkmessage.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Jangada.Networkmessage.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Jangada.Networkmessage.Types.Type.LOGIN;
        return this;
      }
      
      public bool HasLoginPacket {
       get { return result.hasLoginPacket; }
      }
      public global::Jangada.LoginPacket LoginPacket {
        get { return result.LoginPacket; }
        set { SetLoginPacket(value); }
      }
      public Builder SetLoginPacket(global::Jangada.LoginPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLoginPacket = true;
        result.loginPacket_ = value;
        return this;
      }
      public Builder SetLoginPacket(global::Jangada.LoginPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLoginPacket = true;
        result.loginPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLoginPacket(global::Jangada.LoginPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLoginPacket &&
            result.loginPacket_ != global::Jangada.LoginPacket.DefaultInstance) {
            result.loginPacket_ = global::Jangada.LoginPacket.CreateBuilder(result.loginPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.loginPacket_ = value;
        }
        result.hasLoginPacket = true;
        return this;
      }
      public Builder ClearLoginPacket() {
        PrepareBuilder();
        result.hasLoginPacket = false;
        result.loginPacket_ = null;
        return this;
      }
      
      public bool HasCharactersPacket {
       get { return result.hasCharactersPacket; }
      }
      public global::Jangada.CharactersPacket CharactersPacket {
        get { return result.CharactersPacket; }
        set { SetCharactersPacket(value); }
      }
      public Builder SetCharactersPacket(global::Jangada.CharactersPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharactersPacket = true;
        result.charactersPacket_ = value;
        return this;
      }
      public Builder SetCharactersPacket(global::Jangada.CharactersPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharactersPacket = true;
        result.charactersPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharactersPacket(global::Jangada.CharactersPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharactersPacket &&
            result.charactersPacket_ != global::Jangada.CharactersPacket.DefaultInstance) {
            result.charactersPacket_ = global::Jangada.CharactersPacket.CreateBuilder(result.charactersPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.charactersPacket_ = value;
        }
        result.hasCharactersPacket = true;
        return this;
      }
      public Builder ClearCharactersPacket() {
        PrepareBuilder();
        result.hasCharactersPacket = false;
        result.charactersPacket_ = null;
        return this;
      }
      
      public bool HasSelectCharacterPacket {
       get { return result.hasSelectCharacterPacket; }
      }
      public global::Jangada.SelectCharacterPacket SelectCharacterPacket {
        get { return result.SelectCharacterPacket; }
        set { SetSelectCharacterPacket(value); }
      }
      public Builder SetSelectCharacterPacket(global::Jangada.SelectCharacterPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSelectCharacterPacket = true;
        result.selectCharacterPacket_ = value;
        return this;
      }
      public Builder SetSelectCharacterPacket(global::Jangada.SelectCharacterPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSelectCharacterPacket = true;
        result.selectCharacterPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSelectCharacterPacket(global::Jangada.SelectCharacterPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSelectCharacterPacket &&
            result.selectCharacterPacket_ != global::Jangada.SelectCharacterPacket.DefaultInstance) {
            result.selectCharacterPacket_ = global::Jangada.SelectCharacterPacket.CreateBuilder(result.selectCharacterPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.selectCharacterPacket_ = value;
        }
        result.hasSelectCharacterPacket = true;
        return this;
      }
      public Builder ClearSelectCharacterPacket() {
        PrepareBuilder();
        result.hasSelectCharacterPacket = false;
        result.selectCharacterPacket_ = null;
        return this;
      }
      
      public bool HasAreaDescriptionPacket {
       get { return result.hasAreaDescriptionPacket; }
      }
      public global::Jangada.AreaDescriptionPacket AreaDescriptionPacket {
        get { return result.AreaDescriptionPacket; }
        set { SetAreaDescriptionPacket(value); }
      }
      public Builder SetAreaDescriptionPacket(global::Jangada.AreaDescriptionPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAreaDescriptionPacket = true;
        result.areaDescriptionPacket_ = value;
        return this;
      }
      public Builder SetAreaDescriptionPacket(global::Jangada.AreaDescriptionPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAreaDescriptionPacket = true;
        result.areaDescriptionPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAreaDescriptionPacket(global::Jangada.AreaDescriptionPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAreaDescriptionPacket &&
            result.areaDescriptionPacket_ != global::Jangada.AreaDescriptionPacket.DefaultInstance) {
            result.areaDescriptionPacket_ = global::Jangada.AreaDescriptionPacket.CreateBuilder(result.areaDescriptionPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.areaDescriptionPacket_ = value;
        }
        result.hasAreaDescriptionPacket = true;
        return this;
      }
      public Builder ClearAreaDescriptionPacket() {
        PrepareBuilder();
        result.hasAreaDescriptionPacket = false;
        result.areaDescriptionPacket_ = null;
        return this;
      }
      
      public bool HasRequestMovementPacket {
       get { return result.hasRequestMovementPacket; }
      }
      public global::Jangada.RequestMovementPacket RequestMovementPacket {
        get { return result.RequestMovementPacket; }
        set { SetRequestMovementPacket(value); }
      }
      public Builder SetRequestMovementPacket(global::Jangada.RequestMovementPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestMovementPacket = true;
        result.requestMovementPacket_ = value;
        return this;
      }
      public Builder SetRequestMovementPacket(global::Jangada.RequestMovementPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestMovementPacket = true;
        result.requestMovementPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestMovementPacket(global::Jangada.RequestMovementPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestMovementPacket &&
            result.requestMovementPacket_ != global::Jangada.RequestMovementPacket.DefaultInstance) {
            result.requestMovementPacket_ = global::Jangada.RequestMovementPacket.CreateBuilder(result.requestMovementPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.requestMovementPacket_ = value;
        }
        result.hasRequestMovementPacket = true;
        return this;
      }
      public Builder ClearRequestMovementPacket() {
        PrepareBuilder();
        result.hasRequestMovementPacket = false;
        result.requestMovementPacket_ = null;
        return this;
      }
      
      public bool HasPlayerMovementPacket {
       get { return result.hasPlayerMovementPacket; }
      }
      public global::Jangada.PlayerMovementPacket PlayerMovementPacket {
        get { return result.PlayerMovementPacket; }
        set { SetPlayerMovementPacket(value); }
      }
      public Builder SetPlayerMovementPacket(global::Jangada.PlayerMovementPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerMovementPacket = true;
        result.playerMovementPacket_ = value;
        return this;
      }
      public Builder SetPlayerMovementPacket(global::Jangada.PlayerMovementPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerMovementPacket = true;
        result.playerMovementPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerMovementPacket(global::Jangada.PlayerMovementPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerMovementPacket &&
            result.playerMovementPacket_ != global::Jangada.PlayerMovementPacket.DefaultInstance) {
            result.playerMovementPacket_ = global::Jangada.PlayerMovementPacket.CreateBuilder(result.playerMovementPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.playerMovementPacket_ = value;
        }
        result.hasPlayerMovementPacket = true;
        return this;
      }
      public Builder ClearPlayerMovementPacket() {
        PrepareBuilder();
        result.hasPlayerMovementPacket = false;
        result.playerMovementPacket_ = null;
        return this;
      }
      
      public bool HasPlayerLoginPacket {
       get { return result.hasPlayerLoginPacket; }
      }
      public global::Jangada.PlayerLoginPacket PlayerLoginPacket {
        get { return result.PlayerLoginPacket; }
        set { SetPlayerLoginPacket(value); }
      }
      public Builder SetPlayerLoginPacket(global::Jangada.PlayerLoginPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerLoginPacket = true;
        result.playerLoginPacket_ = value;
        return this;
      }
      public Builder SetPlayerLoginPacket(global::Jangada.PlayerLoginPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerLoginPacket = true;
        result.playerLoginPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerLoginPacket(global::Jangada.PlayerLoginPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerLoginPacket &&
            result.playerLoginPacket_ != global::Jangada.PlayerLoginPacket.DefaultInstance) {
            result.playerLoginPacket_ = global::Jangada.PlayerLoginPacket.CreateBuilder(result.playerLoginPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.playerLoginPacket_ = value;
        }
        result.hasPlayerLoginPacket = true;
        return this;
      }
      public Builder ClearPlayerLoginPacket() {
        PrepareBuilder();
        result.hasPlayerLoginPacket = false;
        result.playerLoginPacket_ = null;
        return this;
      }
      
      public bool HasCharacterMovementPacket {
       get { return result.hasCharacterMovementPacket; }
      }
      public global::Jangada.CharacterMovementPacket CharacterMovementPacket {
        get { return result.CharacterMovementPacket; }
        set { SetCharacterMovementPacket(value); }
      }
      public Builder SetCharacterMovementPacket(global::Jangada.CharacterMovementPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharacterMovementPacket = true;
        result.characterMovementPacket_ = value;
        return this;
      }
      public Builder SetCharacterMovementPacket(global::Jangada.CharacterMovementPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharacterMovementPacket = true;
        result.characterMovementPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharacterMovementPacket(global::Jangada.CharacterMovementPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharacterMovementPacket &&
            result.characterMovementPacket_ != global::Jangada.CharacterMovementPacket.DefaultInstance) {
            result.characterMovementPacket_ = global::Jangada.CharacterMovementPacket.CreateBuilder(result.characterMovementPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.characterMovementPacket_ = value;
        }
        result.hasCharacterMovementPacket = true;
        return this;
      }
      public Builder ClearCharacterMovementPacket() {
        PrepareBuilder();
        result.hasCharacterMovementPacket = false;
        result.characterMovementPacket_ = null;
        return this;
      }
      
      public bool HasPlayerLogoutPacket {
       get { return result.hasPlayerLogoutPacket; }
      }
      public global::Jangada.PlayerLogoutPacket PlayerLogoutPacket {
        get { return result.PlayerLogoutPacket; }
        set { SetPlayerLogoutPacket(value); }
      }
      public Builder SetPlayerLogoutPacket(global::Jangada.PlayerLogoutPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerLogoutPacket = true;
        result.playerLogoutPacket_ = value;
        return this;
      }
      public Builder SetPlayerLogoutPacket(global::Jangada.PlayerLogoutPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerLogoutPacket = true;
        result.playerLogoutPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerLogoutPacket(global::Jangada.PlayerLogoutPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerLogoutPacket &&
            result.playerLogoutPacket_ != global::Jangada.PlayerLogoutPacket.DefaultInstance) {
            result.playerLogoutPacket_ = global::Jangada.PlayerLogoutPacket.CreateBuilder(result.playerLogoutPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.playerLogoutPacket_ = value;
        }
        result.hasPlayerLogoutPacket = true;
        return this;
      }
      public Builder ClearPlayerLogoutPacket() {
        PrepareBuilder();
        result.hasPlayerLogoutPacket = false;
        result.playerLogoutPacket_ = null;
        return this;
      }
      
      public bool HasCreatureRespawnPacket {
       get { return result.hasCreatureRespawnPacket; }
      }
      public global::Jangada.CreatureRespawnPacket CreatureRespawnPacket {
        get { return result.CreatureRespawnPacket; }
        set { SetCreatureRespawnPacket(value); }
      }
      public Builder SetCreatureRespawnPacket(global::Jangada.CreatureRespawnPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreatureRespawnPacket = true;
        result.creatureRespawnPacket_ = value;
        return this;
      }
      public Builder SetCreatureRespawnPacket(global::Jangada.CreatureRespawnPacket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreatureRespawnPacket = true;
        result.creatureRespawnPacket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreatureRespawnPacket(global::Jangada.CreatureRespawnPacket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreatureRespawnPacket &&
            result.creatureRespawnPacket_ != global::Jangada.CreatureRespawnPacket.DefaultInstance) {
            result.creatureRespawnPacket_ = global::Jangada.CreatureRespawnPacket.CreateBuilder(result.creatureRespawnPacket_).MergeFrom(value).BuildPartial();
        } else {
          result.creatureRespawnPacket_ = value;
        }
        result.hasCreatureRespawnPacket = true;
        return this;
      }
      public Builder ClearCreatureRespawnPacket() {
        PrepareBuilder();
        result.hasCreatureRespawnPacket = false;
        result.creatureRespawnPacket_ = null;
        return this;
      }
    }
    static Networkmessage() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginPacket : pb::GeneratedMessage<LoginPacket, LoginPacket.Builder> {
    private LoginPacket() { }
    private static readonly LoginPacket defaultInstance = new LoginPacket().MakeReadOnly();
    private static readonly string[] _loginPacketFieldNames = new string[] { "login", "password" };
    private static readonly uint[] _loginPacketFieldTags = new uint[] { 10, 18 };
    public static LoginPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_LoginPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginPacket, LoginPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_LoginPacket__FieldAccessorTable; }
    }
    
    public const int LoginFieldNumber = 1;
    private bool hasLogin;
    private string login_ = "";
    public bool HasLogin {
      get { return hasLogin; }
    }
    public string Login {
      get { return login_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLogin) return false;
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginPacketFieldNames;
      if (hasLogin) {
        output.WriteString(1, field_names[0], Login);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[1], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLogin) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Login);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginPacket result;
      
      private LoginPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginPacket original = result;
          result = new LoginPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.LoginPacket.Descriptor; }
      }
      
      public override LoginPacket DefaultInstanceForType {
        get { return global::Jangada.LoginPacket.DefaultInstance; }
      }
      
      public override LoginPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginPacket) {
          return MergeFrom((LoginPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginPacket other) {
        if (other == global::Jangada.LoginPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLogin) {
          Login = other.Login;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLogin = input.ReadString(ref result.login_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLogin {
        get { return result.hasLogin; }
      }
      public string Login {
        get { return result.Login; }
        set { SetLogin(value); }
      }
      public Builder SetLogin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = value;
        return this;
      }
      public Builder ClearLogin() {
        PrepareBuilder();
        result.hasLogin = false;
        result.login_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static LoginPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Character : pb::GeneratedMessage<Character, Character.Builder> {
    private Character() { }
    private static readonly Character defaultInstance = new Character().MakeReadOnly();
    private static readonly string[] _characterFieldNames = new string[] { "id", "info", "name" };
    private static readonly uint[] _characterFieldTags = new uint[] { 8, 26, 18 };
    public static Character DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Character DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Character ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Character__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Character, Character.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Character__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int InfoFieldNumber = 3;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasInfo) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _characterFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasInfo) {
        output.WriteString(3, field_names[1], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Character ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Character ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Character ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Character ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Character ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Character ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Character ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Character ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Character ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Character ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Character MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Character prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Character, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Character cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Character result;
      
      private Character PrepareBuilder() {
        if (resultIsReadOnly) {
          Character original = result;
          result = new Character();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Character MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Character.Descriptor; }
      }
      
      public override Character DefaultInstanceForType {
        get { return global::Jangada.Character.DefaultInstance; }
      }
      
      public override Character BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Character) {
          return MergeFrom((Character) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Character other) {
        if (other == global::Jangada.Character.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_characterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _characterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
    }
    static Character() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CharactersPacket : pb::GeneratedMessage<CharactersPacket, CharactersPacket.Builder> {
    private CharactersPacket() { }
    private static readonly CharactersPacket defaultInstance = new CharactersPacket().MakeReadOnly();
    private static readonly string[] _charactersPacketFieldNames = new string[] { "CharacterList" };
    private static readonly uint[] _charactersPacketFieldTags = new uint[] { 10 };
    public static CharactersPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CharactersPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CharactersPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CharactersPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CharactersPacket, CharactersPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CharactersPacket__FieldAccessorTable; }
    }
    
    public const int CharacterListFieldNumber = 1;
    private pbc::PopsicleList<global::Jangada.Character> characterList_ = new pbc::PopsicleList<global::Jangada.Character>();
    public scg::IList<global::Jangada.Character> CharacterListList {
      get { return characterList_; }
    }
    public int CharacterListCount {
      get { return characterList_.Count; }
    }
    public global::Jangada.Character GetCharacterList(int index) {
      return characterList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Jangada.Character element in CharacterListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _charactersPacketFieldNames;
      if (characterList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], characterList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Jangada.Character element in CharacterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CharactersPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CharactersPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CharactersPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CharactersPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharactersPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CharactersPacket MakeReadOnly() {
      characterList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CharactersPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CharactersPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CharactersPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CharactersPacket result;
      
      private CharactersPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          CharactersPacket original = result;
          result = new CharactersPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CharactersPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.CharactersPacket.Descriptor; }
      }
      
      public override CharactersPacket DefaultInstanceForType {
        get { return global::Jangada.CharactersPacket.DefaultInstance; }
      }
      
      public override CharactersPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CharactersPacket) {
          return MergeFrom((CharactersPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CharactersPacket other) {
        if (other == global::Jangada.CharactersPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.characterList_.Count != 0) {
          result.characterList_.Add(other.characterList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_charactersPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _charactersPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.characterList_, global::Jangada.Character.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Jangada.Character> CharacterListList {
        get { return PrepareBuilder().characterList_; }
      }
      public int CharacterListCount {
        get { return result.CharacterListCount; }
      }
      public global::Jangada.Character GetCharacterList(int index) {
        return result.GetCharacterList(index);
      }
      public Builder SetCharacterList(int index, global::Jangada.Character value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.characterList_[index] = value;
        return this;
      }
      public Builder SetCharacterList(int index, global::Jangada.Character.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.characterList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCharacterList(global::Jangada.Character value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.characterList_.Add(value);
        return this;
      }
      public Builder AddCharacterList(global::Jangada.Character.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.characterList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCharacterList(scg::IEnumerable<global::Jangada.Character> values) {
        PrepareBuilder();
        result.characterList_.Add(values);
        return this;
      }
      public Builder ClearCharacterList() {
        PrepareBuilder();
        result.characterList_.Clear();
        return this;
      }
    }
    static CharactersPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SelectCharacterPacket : pb::GeneratedMessage<SelectCharacterPacket, SelectCharacterPacket.Builder> {
    private SelectCharacterPacket() { }
    private static readonly SelectCharacterPacket defaultInstance = new SelectCharacterPacket().MakeReadOnly();
    private static readonly string[] _selectCharacterPacketFieldNames = new string[] { "id" };
    private static readonly uint[] _selectCharacterPacketFieldTags = new uint[] { 8 };
    public static SelectCharacterPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SelectCharacterPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SelectCharacterPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_SelectCharacterPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SelectCharacterPacket, SelectCharacterPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_SelectCharacterPacket__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _selectCharacterPacketFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SelectCharacterPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SelectCharacterPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SelectCharacterPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectCharacterPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SelectCharacterPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SelectCharacterPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SelectCharacterPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SelectCharacterPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SelectCharacterPacket result;
      
      private SelectCharacterPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          SelectCharacterPacket original = result;
          result = new SelectCharacterPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SelectCharacterPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.SelectCharacterPacket.Descriptor; }
      }
      
      public override SelectCharacterPacket DefaultInstanceForType {
        get { return global::Jangada.SelectCharacterPacket.DefaultInstance; }
      }
      
      public override SelectCharacterPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SelectCharacterPacket) {
          return MergeFrom((SelectCharacterPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SelectCharacterPacket other) {
        if (other == global::Jangada.SelectCharacterPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_selectCharacterPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _selectCharacterPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static SelectCharacterPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
    private Position() { }
    private static readonly Position defaultInstance = new Position().MakeReadOnly();
    private static readonly string[] _positionFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _positionFieldTags = new uint[] { 13, 21, 29 };
    public static Position DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Position DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Position ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Position__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Position__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _positionFieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteFloat(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Z);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Position ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Position MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Position prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Position cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Position result;
      
      private Position PrepareBuilder() {
        if (resultIsReadOnly) {
          Position original = result;
          result = new Position();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Position MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Position.Descriptor; }
      }
      
      public override Position DefaultInstanceForType {
        get { return global::Jangada.Position.DefaultInstance; }
      }
      
      public override Position BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Position) {
          return MergeFrom((Position) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Position other) {
        if (other == global::Jangada.Position.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _positionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 29: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }
    }
    static Position() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QuaternionMessage : pb::GeneratedMessage<QuaternionMessage, QuaternionMessage.Builder> {
    private QuaternionMessage() { }
    private static readonly QuaternionMessage defaultInstance = new QuaternionMessage().MakeReadOnly();
    private static readonly string[] _quaternionMessageFieldNames = new string[] { "w", "x", "y", "z" };
    private static readonly uint[] _quaternionMessageFieldTags = new uint[] { 13, 21, 29, 37 };
    public static QuaternionMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuaternionMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuaternionMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_QuaternionMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuaternionMessage, QuaternionMessage.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_QuaternionMessage__FieldAccessorTable; }
    }
    
    public const int WFieldNumber = 1;
    private bool hasW;
    private float w_;
    public bool HasW {
      get { return hasW; }
    }
    public float W {
      get { return w_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 4;
    private bool hasZ;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasW) return false;
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _quaternionMessageFieldNames;
      if (hasW) {
        output.WriteFloat(1, field_names[0], W);
      }
      if (hasX) {
        output.WriteFloat(2, field_names[1], X);
      }
      if (hasY) {
        output.WriteFloat(3, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteFloat(4, field_names[3], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasW) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, W);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Y);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Z);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuaternionMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuaternionMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuaternionMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuaternionMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuaternionMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuaternionMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QuaternionMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuaternionMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuaternionMessage result;
      
      private QuaternionMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QuaternionMessage original = result;
          result = new QuaternionMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuaternionMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.QuaternionMessage.Descriptor; }
      }
      
      public override QuaternionMessage DefaultInstanceForType {
        get { return global::Jangada.QuaternionMessage.DefaultInstance; }
      }
      
      public override QuaternionMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuaternionMessage) {
          return MergeFrom((QuaternionMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuaternionMessage other) {
        if (other == global::Jangada.QuaternionMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasW) {
          W = other.W;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_quaternionMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _quaternionMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasW = input.ReadFloat(ref result.w_);
              break;
            }
            case 21: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 29: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 37: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasW {
        get { return result.hasW; }
      }
      public float W {
        get { return result.W; }
        set { SetW(value); }
      }
      public Builder SetW(float value) {
        PrepareBuilder();
        result.hasW = true;
        result.w_ = value;
        return this;
      }
      public Builder ClearW() {
        PrepareBuilder();
        result.hasW = false;
        result.w_ = 0F;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }
    }
    static QuaternionMessage() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RequestMovementPacket : pb::GeneratedMessage<RequestMovementPacket, RequestMovementPacket.Builder> {
    private RequestMovementPacket() { }
    private static readonly RequestMovementPacket defaultInstance = new RequestMovementPacket().MakeReadOnly();
    private static readonly string[] _requestMovementPacketFieldNames = new string[] { "ammount", "movementType" };
    private static readonly uint[] _requestMovementPacketFieldTags = new uint[] { 21, 8 };
    public static RequestMovementPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestMovementPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestMovementPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_RequestMovementPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestMovementPacket, RequestMovementPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_RequestMovementPacket__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MovementType {
        FORWARD = 1,
        BACKWARD = 2,
        YAW = 3,
      }
      
    }
    #endregion
    
    public const int MovementTypeFieldNumber = 1;
    private bool hasMovementType;
    private global::Jangada.RequestMovementPacket.Types.MovementType movementType_ = global::Jangada.RequestMovementPacket.Types.MovementType.FORWARD;
    public bool HasMovementType {
      get { return hasMovementType; }
    }
    public global::Jangada.RequestMovementPacket.Types.MovementType MovementType {
      get { return movementType_; }
    }
    
    public const int AmmountFieldNumber = 2;
    private bool hasAmmount;
    private float ammount_;
    public bool HasAmmount {
      get { return hasAmmount; }
    }
    public float Ammount {
      get { return ammount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMovementType) return false;
        if (!hasAmmount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestMovementPacketFieldNames;
      if (hasMovementType) {
        output.WriteEnum(1, field_names[1], (int) MovementType, MovementType);
      }
      if (hasAmmount) {
        output.WriteFloat(2, field_names[0], Ammount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMovementType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MovementType);
        }
        if (hasAmmount) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Ammount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestMovementPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestMovementPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestMovementPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestMovementPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestMovementPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestMovementPacket result;
      
      private RequestMovementPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestMovementPacket original = result;
          result = new RequestMovementPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestMovementPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.RequestMovementPacket.Descriptor; }
      }
      
      public override RequestMovementPacket DefaultInstanceForType {
        get { return global::Jangada.RequestMovementPacket.DefaultInstance; }
      }
      
      public override RequestMovementPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestMovementPacket) {
          return MergeFrom((RequestMovementPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestMovementPacket other) {
        if (other == global::Jangada.RequestMovementPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMovementType) {
          MovementType = other.MovementType;
        }
        if (other.HasAmmount) {
          Ammount = other.Ammount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestMovementPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.movementType_, out unknown)) {
                result.hasMovementType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 21: {
              result.hasAmmount = input.ReadFloat(ref result.ammount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMovementType {
       get { return result.hasMovementType; }
      }
      public global::Jangada.RequestMovementPacket.Types.MovementType MovementType {
        get { return result.MovementType; }
        set { SetMovementType(value); }
      }
      public Builder SetMovementType(global::Jangada.RequestMovementPacket.Types.MovementType value) {
        PrepareBuilder();
        result.hasMovementType = true;
        result.movementType_ = value;
        return this;
      }
      public Builder ClearMovementType() {
        PrepareBuilder();
        result.hasMovementType = false;
        result.movementType_ = global::Jangada.RequestMovementPacket.Types.MovementType.FORWARD;
        return this;
      }
      
      public bool HasAmmount {
        get { return result.hasAmmount; }
      }
      public float Ammount {
        get { return result.Ammount; }
        set { SetAmmount(value); }
      }
      public Builder SetAmmount(float value) {
        PrepareBuilder();
        result.hasAmmount = true;
        result.ammount_ = value;
        return this;
      }
      public Builder ClearAmmount() {
        PrepareBuilder();
        result.hasAmmount = false;
        result.ammount_ = 0F;
        return this;
      }
    }
    static RequestMovementPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AreaDescriptionPacket : pb::GeneratedMessage<AreaDescriptionPacket, AreaDescriptionPacket.Builder> {
    private AreaDescriptionPacket() { }
    private static readonly AreaDescriptionPacket defaultInstance = new AreaDescriptionPacket().MakeReadOnly();
    private static readonly string[] _areaDescriptionPacketFieldNames = new string[] { "areaId", "creatures", "player", "players" };
    private static readonly uint[] _areaDescriptionPacketFieldTags = new uint[] { 8, 34, 18, 26 };
    public static AreaDescriptionPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AreaDescriptionPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AreaDescriptionPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_AreaDescriptionPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AreaDescriptionPacket, AreaDescriptionPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_AreaDescriptionPacket__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private int areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public int AreaId {
      get { return areaId_; }
    }
    
    public const int PlayerFieldNumber = 2;
    private bool hasPlayer;
    private global::Jangada.PlayerDescription player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::Jangada.PlayerDescription Player {
      get { return player_ ?? global::Jangada.PlayerDescription.DefaultInstance; }
    }
    
    public const int PlayersFieldNumber = 3;
    private pbc::PopsicleList<global::Jangada.PlayerDescription> players_ = new pbc::PopsicleList<global::Jangada.PlayerDescription>();
    public scg::IList<global::Jangada.PlayerDescription> PlayersList {
      get { return players_; }
    }
    public int PlayersCount {
      get { return players_.Count; }
    }
    public global::Jangada.PlayerDescription GetPlayers(int index) {
      return players_[index];
    }
    
    public const int CreaturesFieldNumber = 4;
    private pbc::PopsicleList<global::Jangada.CreatureDescription> creatures_ = new pbc::PopsicleList<global::Jangada.CreatureDescription>();
    public scg::IList<global::Jangada.CreatureDescription> CreaturesList {
      get { return creatures_; }
    }
    public int CreaturesCount {
      get { return creatures_.Count; }
    }
    public global::Jangada.CreatureDescription GetCreatures(int index) {
      return creatures_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasPlayer) return false;
        if (!Player.IsInitialized) return false;
        foreach (global::Jangada.PlayerDescription element in PlayersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Jangada.CreatureDescription element in CreaturesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _areaDescriptionPacketFieldNames;
      if (hasAreaId) {
        output.WriteInt32(1, field_names[0], AreaId);
      }
      if (hasPlayer) {
        output.WriteMessage(2, field_names[2], Player);
      }
      if (players_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], players_);
      }
      if (creatures_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], creatures_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAreaId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, AreaId);
        }
        if (hasPlayer) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Player);
        }
        foreach (global::Jangada.PlayerDescription element in PlayersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Jangada.CreatureDescription element in CreaturesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AreaDescriptionPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AreaDescriptionPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AreaDescriptionPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AreaDescriptionPacket MakeReadOnly() {
      players_.MakeReadOnly();
      creatures_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AreaDescriptionPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AreaDescriptionPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AreaDescriptionPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AreaDescriptionPacket result;
      
      private AreaDescriptionPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          AreaDescriptionPacket original = result;
          result = new AreaDescriptionPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AreaDescriptionPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.AreaDescriptionPacket.Descriptor; }
      }
      
      public override AreaDescriptionPacket DefaultInstanceForType {
        get { return global::Jangada.AreaDescriptionPacket.DefaultInstance; }
      }
      
      public override AreaDescriptionPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AreaDescriptionPacket) {
          return MergeFrom((AreaDescriptionPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AreaDescriptionPacket other) {
        if (other == global::Jangada.AreaDescriptionPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        if (other.players_.Count != 0) {
          result.players_.Add(other.players_);
        }
        if (other.creatures_.Count != 0) {
          result.creatures_.Add(other.creatures_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_areaDescriptionPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _areaDescriptionPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadInt32(ref result.areaId_);
              break;
            }
            case 18: {
              global::Jangada.PlayerDescription.Builder subBuilder = global::Jangada.PlayerDescription.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.players_, global::Jangada.PlayerDescription.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.creatures_, global::Jangada.CreatureDescription.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public int AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(int value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::Jangada.PlayerDescription Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::Jangada.PlayerDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer &&
            result.player_ != global::Jangada.PlayerDescription.DefaultInstance) {
            result.player_ = global::Jangada.PlayerDescription.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
        }
        result.hasPlayer = true;
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Jangada.PlayerDescription> PlayersList {
        get { return PrepareBuilder().players_; }
      }
      public int PlayersCount {
        get { return result.PlayersCount; }
      }
      public global::Jangada.PlayerDescription GetPlayers(int index) {
        return result.GetPlayers(index);
      }
      public Builder SetPlayers(int index, global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.players_[index] = value;
        return this;
      }
      public Builder SetPlayers(int index, global::Jangada.PlayerDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.players_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayers(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.players_.Add(value);
        return this;
      }
      public Builder AddPlayers(global::Jangada.PlayerDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.players_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayers(scg::IEnumerable<global::Jangada.PlayerDescription> values) {
        PrepareBuilder();
        result.players_.Add(values);
        return this;
      }
      public Builder ClearPlayers() {
        PrepareBuilder();
        result.players_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Jangada.CreatureDescription> CreaturesList {
        get { return PrepareBuilder().creatures_; }
      }
      public int CreaturesCount {
        get { return result.CreaturesCount; }
      }
      public global::Jangada.CreatureDescription GetCreatures(int index) {
        return result.GetCreatures(index);
      }
      public Builder SetCreatures(int index, global::Jangada.CreatureDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.creatures_[index] = value;
        return this;
      }
      public Builder SetCreatures(int index, global::Jangada.CreatureDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.creatures_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCreatures(global::Jangada.CreatureDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.creatures_.Add(value);
        return this;
      }
      public Builder AddCreatures(global::Jangada.CreatureDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.creatures_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCreatures(scg::IEnumerable<global::Jangada.CreatureDescription> values) {
        PrepareBuilder();
        result.creatures_.Add(values);
        return this;
      }
      public Builder ClearCreatures() {
        PrepareBuilder();
        result.creatures_.Clear();
        return this;
      }
    }
    static AreaDescriptionPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreatureRespawnPacket : pb::GeneratedMessage<CreatureRespawnPacket, CreatureRespawnPacket.Builder> {
    private CreatureRespawnPacket() { }
    private static readonly CreatureRespawnPacket defaultInstance = new CreatureRespawnPacket().MakeReadOnly();
    private static readonly string[] _creatureRespawnPacketFieldNames = new string[] { "creatureDescription" };
    private static readonly uint[] _creatureRespawnPacketFieldTags = new uint[] { 10 };
    public static CreatureRespawnPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreatureRespawnPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreatureRespawnPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CreatureRespawnPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreatureRespawnPacket, CreatureRespawnPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CreatureRespawnPacket__FieldAccessorTable; }
    }
    
    public const int CreatureDescriptionFieldNumber = 1;
    private bool hasCreatureDescription;
    private global::Jangada.CreatureDescription creatureDescription_;
    public bool HasCreatureDescription {
      get { return hasCreatureDescription; }
    }
    public global::Jangada.CreatureDescription CreatureDescription {
      get { return creatureDescription_ ?? global::Jangada.CreatureDescription.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCreatureDescription) return false;
        if (!CreatureDescription.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _creatureRespawnPacketFieldNames;
      if (hasCreatureDescription) {
        output.WriteMessage(1, field_names[0], CreatureDescription);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCreatureDescription) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, CreatureDescription);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreatureRespawnPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreatureRespawnPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreatureRespawnPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreatureRespawnPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreatureRespawnPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreatureRespawnPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreatureRespawnPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreatureRespawnPacket result;
      
      private CreatureRespawnPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          CreatureRespawnPacket original = result;
          result = new CreatureRespawnPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreatureRespawnPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.CreatureRespawnPacket.Descriptor; }
      }
      
      public override CreatureRespawnPacket DefaultInstanceForType {
        get { return global::Jangada.CreatureRespawnPacket.DefaultInstance; }
      }
      
      public override CreatureRespawnPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreatureRespawnPacket) {
          return MergeFrom((CreatureRespawnPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreatureRespawnPacket other) {
        if (other == global::Jangada.CreatureRespawnPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCreatureDescription) {
          MergeCreatureDescription(other.CreatureDescription);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_creatureRespawnPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _creatureRespawnPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Jangada.CreatureDescription.Builder subBuilder = global::Jangada.CreatureDescription.CreateBuilder();
              if (result.hasCreatureDescription) {
                subBuilder.MergeFrom(CreatureDescription);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreatureDescription = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCreatureDescription {
       get { return result.hasCreatureDescription; }
      }
      public global::Jangada.CreatureDescription CreatureDescription {
        get { return result.CreatureDescription; }
        set { SetCreatureDescription(value); }
      }
      public Builder SetCreatureDescription(global::Jangada.CreatureDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreatureDescription = true;
        result.creatureDescription_ = value;
        return this;
      }
      public Builder SetCreatureDescription(global::Jangada.CreatureDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreatureDescription = true;
        result.creatureDescription_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreatureDescription(global::Jangada.CreatureDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreatureDescription &&
            result.creatureDescription_ != global::Jangada.CreatureDescription.DefaultInstance) {
            result.creatureDescription_ = global::Jangada.CreatureDescription.CreateBuilder(result.creatureDescription_).MergeFrom(value).BuildPartial();
        } else {
          result.creatureDescription_ = value;
        }
        result.hasCreatureDescription = true;
        return this;
      }
      public Builder ClearCreatureDescription() {
        PrepareBuilder();
        result.hasCreatureDescription = false;
        result.creatureDescription_ = null;
        return this;
      }
    }
    static CreatureRespawnPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreatureDescription : pb::GeneratedMessage<CreatureDescription, CreatureDescription.Builder> {
    private CreatureDescription() { }
    private static readonly CreatureDescription defaultInstance = new CreatureDescription().MakeReadOnly();
    private static readonly string[] _creatureDescriptionFieldNames = new string[] { "creatureGuid", "creaturePosition", "creatureRotation", "modelId", "skills", "stats" };
    private static readonly uint[] _creatureDescriptionFieldTags = new uint[] { 10, 26, 34, 16, 50, 42 };
    public static CreatureDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreatureDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreatureDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CreatureDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreatureDescription, CreatureDescription.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CreatureDescription__FieldAccessorTable; }
    }
    
    public const int CreatureGuidFieldNumber = 1;
    private bool hasCreatureGuid;
    private string creatureGuid_ = "";
    public bool HasCreatureGuid {
      get { return hasCreatureGuid; }
    }
    public string CreatureGuid {
      get { return creatureGuid_; }
    }
    
    public const int ModelIdFieldNumber = 2;
    private bool hasModelId;
    private int modelId_;
    public bool HasModelId {
      get { return hasModelId; }
    }
    public int ModelId {
      get { return modelId_; }
    }
    
    public const int CreaturePositionFieldNumber = 3;
    private bool hasCreaturePosition;
    private global::Jangada.Position creaturePosition_;
    public bool HasCreaturePosition {
      get { return hasCreaturePosition; }
    }
    public global::Jangada.Position CreaturePosition {
      get { return creaturePosition_ ?? global::Jangada.Position.DefaultInstance; }
    }
    
    public const int CreatureRotationFieldNumber = 4;
    private bool hasCreatureRotation;
    private global::Jangada.QuaternionMessage creatureRotation_;
    public bool HasCreatureRotation {
      get { return hasCreatureRotation; }
    }
    public global::Jangada.QuaternionMessage CreatureRotation {
      get { return creatureRotation_ ?? global::Jangada.QuaternionMessage.DefaultInstance; }
    }
    
    public const int StatsFieldNumber = 5;
    private bool hasStats;
    private global::Jangada.StatsDescription stats_;
    public bool HasStats {
      get { return hasStats; }
    }
    public global::Jangada.StatsDescription Stats {
      get { return stats_ ?? global::Jangada.StatsDescription.DefaultInstance; }
    }
    
    public const int SkillsFieldNumber = 6;
    private pbc::PopsicleList<global::Jangada.SkillsDescription> skills_ = new pbc::PopsicleList<global::Jangada.SkillsDescription>();
    public scg::IList<global::Jangada.SkillsDescription> SkillsList {
      get { return skills_; }
    }
    public int SkillsCount {
      get { return skills_.Count; }
    }
    public global::Jangada.SkillsDescription GetSkills(int index) {
      return skills_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCreatureGuid) return false;
        if (!hasModelId) return false;
        if (!hasCreaturePosition) return false;
        if (!hasCreatureRotation) return false;
        if (!hasStats) return false;
        if (!CreaturePosition.IsInitialized) return false;
        if (!CreatureRotation.IsInitialized) return false;
        if (!Stats.IsInitialized) return false;
        foreach (global::Jangada.SkillsDescription element in SkillsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _creatureDescriptionFieldNames;
      if (hasCreatureGuid) {
        output.WriteString(1, field_names[0], CreatureGuid);
      }
      if (hasModelId) {
        output.WriteInt32(2, field_names[3], ModelId);
      }
      if (hasCreaturePosition) {
        output.WriteMessage(3, field_names[1], CreaturePosition);
      }
      if (hasCreatureRotation) {
        output.WriteMessage(4, field_names[2], CreatureRotation);
      }
      if (hasStats) {
        output.WriteMessage(5, field_names[5], Stats);
      }
      if (skills_.Count > 0) {
        output.WriteMessageArray(6, field_names[4], skills_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCreatureGuid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CreatureGuid);
        }
        if (hasModelId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ModelId);
        }
        if (hasCreaturePosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CreaturePosition);
        }
        if (hasCreatureRotation) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, CreatureRotation);
        }
        if (hasStats) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Stats);
        }
        foreach (global::Jangada.SkillsDescription element in SkillsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreatureDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreatureDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreatureDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreatureDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreatureDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreatureDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreatureDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreatureDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreatureDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreatureDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreatureDescription MakeReadOnly() {
      skills_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreatureDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreatureDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreatureDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreatureDescription result;
      
      private CreatureDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          CreatureDescription original = result;
          result = new CreatureDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreatureDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.CreatureDescription.Descriptor; }
      }
      
      public override CreatureDescription DefaultInstanceForType {
        get { return global::Jangada.CreatureDescription.DefaultInstance; }
      }
      
      public override CreatureDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreatureDescription) {
          return MergeFrom((CreatureDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreatureDescription other) {
        if (other == global::Jangada.CreatureDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCreatureGuid) {
          CreatureGuid = other.CreatureGuid;
        }
        if (other.HasModelId) {
          ModelId = other.ModelId;
        }
        if (other.HasCreaturePosition) {
          MergeCreaturePosition(other.CreaturePosition);
        }
        if (other.HasCreatureRotation) {
          MergeCreatureRotation(other.CreatureRotation);
        }
        if (other.HasStats) {
          MergeStats(other.Stats);
        }
        if (other.skills_.Count != 0) {
          result.skills_.Add(other.skills_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_creatureDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _creatureDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCreatureGuid = input.ReadString(ref result.creatureGuid_);
              break;
            }
            case 16: {
              result.hasModelId = input.ReadInt32(ref result.modelId_);
              break;
            }
            case 26: {
              global::Jangada.Position.Builder subBuilder = global::Jangada.Position.CreateBuilder();
              if (result.hasCreaturePosition) {
                subBuilder.MergeFrom(CreaturePosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreaturePosition = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Jangada.QuaternionMessage.Builder subBuilder = global::Jangada.QuaternionMessage.CreateBuilder();
              if (result.hasCreatureRotation) {
                subBuilder.MergeFrom(CreatureRotation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreatureRotation = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Jangada.StatsDescription.Builder subBuilder = global::Jangada.StatsDescription.CreateBuilder();
              if (result.hasStats) {
                subBuilder.MergeFrom(Stats);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Stats = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.skills_, global::Jangada.SkillsDescription.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCreatureGuid {
        get { return result.hasCreatureGuid; }
      }
      public string CreatureGuid {
        get { return result.CreatureGuid; }
        set { SetCreatureGuid(value); }
      }
      public Builder SetCreatureGuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreatureGuid = true;
        result.creatureGuid_ = value;
        return this;
      }
      public Builder ClearCreatureGuid() {
        PrepareBuilder();
        result.hasCreatureGuid = false;
        result.creatureGuid_ = "";
        return this;
      }
      
      public bool HasModelId {
        get { return result.hasModelId; }
      }
      public int ModelId {
        get { return result.ModelId; }
        set { SetModelId(value); }
      }
      public Builder SetModelId(int value) {
        PrepareBuilder();
        result.hasModelId = true;
        result.modelId_ = value;
        return this;
      }
      public Builder ClearModelId() {
        PrepareBuilder();
        result.hasModelId = false;
        result.modelId_ = 0;
        return this;
      }
      
      public bool HasCreaturePosition {
       get { return result.hasCreaturePosition; }
      }
      public global::Jangada.Position CreaturePosition {
        get { return result.CreaturePosition; }
        set { SetCreaturePosition(value); }
      }
      public Builder SetCreaturePosition(global::Jangada.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreaturePosition = true;
        result.creaturePosition_ = value;
        return this;
      }
      public Builder SetCreaturePosition(global::Jangada.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreaturePosition = true;
        result.creaturePosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreaturePosition(global::Jangada.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreaturePosition &&
            result.creaturePosition_ != global::Jangada.Position.DefaultInstance) {
            result.creaturePosition_ = global::Jangada.Position.CreateBuilder(result.creaturePosition_).MergeFrom(value).BuildPartial();
        } else {
          result.creaturePosition_ = value;
        }
        result.hasCreaturePosition = true;
        return this;
      }
      public Builder ClearCreaturePosition() {
        PrepareBuilder();
        result.hasCreaturePosition = false;
        result.creaturePosition_ = null;
        return this;
      }
      
      public bool HasCreatureRotation {
       get { return result.hasCreatureRotation; }
      }
      public global::Jangada.QuaternionMessage CreatureRotation {
        get { return result.CreatureRotation; }
        set { SetCreatureRotation(value); }
      }
      public Builder SetCreatureRotation(global::Jangada.QuaternionMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreatureRotation = true;
        result.creatureRotation_ = value;
        return this;
      }
      public Builder SetCreatureRotation(global::Jangada.QuaternionMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreatureRotation = true;
        result.creatureRotation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreatureRotation(global::Jangada.QuaternionMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreatureRotation &&
            result.creatureRotation_ != global::Jangada.QuaternionMessage.DefaultInstance) {
            result.creatureRotation_ = global::Jangada.QuaternionMessage.CreateBuilder(result.creatureRotation_).MergeFrom(value).BuildPartial();
        } else {
          result.creatureRotation_ = value;
        }
        result.hasCreatureRotation = true;
        return this;
      }
      public Builder ClearCreatureRotation() {
        PrepareBuilder();
        result.hasCreatureRotation = false;
        result.creatureRotation_ = null;
        return this;
      }
      
      public bool HasStats {
       get { return result.hasStats; }
      }
      public global::Jangada.StatsDescription Stats {
        get { return result.Stats; }
        set { SetStats(value); }
      }
      public Builder SetStats(global::Jangada.StatsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStats = true;
        result.stats_ = value;
        return this;
      }
      public Builder SetStats(global::Jangada.StatsDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStats = true;
        result.stats_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStats(global::Jangada.StatsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStats &&
            result.stats_ != global::Jangada.StatsDescription.DefaultInstance) {
            result.stats_ = global::Jangada.StatsDescription.CreateBuilder(result.stats_).MergeFrom(value).BuildPartial();
        } else {
          result.stats_ = value;
        }
        result.hasStats = true;
        return this;
      }
      public Builder ClearStats() {
        PrepareBuilder();
        result.hasStats = false;
        result.stats_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Jangada.SkillsDescription> SkillsList {
        get { return PrepareBuilder().skills_; }
      }
      public int SkillsCount {
        get { return result.SkillsCount; }
      }
      public global::Jangada.SkillsDescription GetSkills(int index) {
        return result.GetSkills(index);
      }
      public Builder SetSkills(int index, global::Jangada.SkillsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skills_[index] = value;
        return this;
      }
      public Builder SetSkills(int index, global::Jangada.SkillsDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skills_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkills(global::Jangada.SkillsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skills_.Add(value);
        return this;
      }
      public Builder AddSkills(global::Jangada.SkillsDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skills_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkills(scg::IEnumerable<global::Jangada.SkillsDescription> values) {
        PrepareBuilder();
        result.skills_.Add(values);
        return this;
      }
      public Builder ClearSkills() {
        PrepareBuilder();
        result.skills_.Clear();
        return this;
      }
    }
    static CreatureDescription() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerDescription : pb::GeneratedMessage<PlayerDescription, PlayerDescription.Builder> {
    private PlayerDescription() { }
    private static readonly PlayerDescription defaultInstance = new PlayerDescription().MakeReadOnly();
    private static readonly string[] _playerDescriptionFieldNames = new string[] { "playerGuid", "playerPosition", "playerRotation", "skills", "stats" };
    private static readonly uint[] _playerDescriptionFieldTags = new uint[] { 10, 18, 26, 42, 34 };
    public static PlayerDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerDescription, PlayerDescription.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerDescription__FieldAccessorTable; }
    }
    
    public const int PlayerGuidFieldNumber = 1;
    private bool hasPlayerGuid;
    private string playerGuid_ = "";
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public string PlayerGuid {
      get { return playerGuid_; }
    }
    
    public const int PlayerPositionFieldNumber = 2;
    private bool hasPlayerPosition;
    private global::Jangada.Position playerPosition_;
    public bool HasPlayerPosition {
      get { return hasPlayerPosition; }
    }
    public global::Jangada.Position PlayerPosition {
      get { return playerPosition_ ?? global::Jangada.Position.DefaultInstance; }
    }
    
    public const int PlayerRotationFieldNumber = 3;
    private bool hasPlayerRotation;
    private global::Jangada.QuaternionMessage playerRotation_;
    public bool HasPlayerRotation {
      get { return hasPlayerRotation; }
    }
    public global::Jangada.QuaternionMessage PlayerRotation {
      get { return playerRotation_ ?? global::Jangada.QuaternionMessage.DefaultInstance; }
    }
    
    public const int StatsFieldNumber = 4;
    private bool hasStats;
    private global::Jangada.StatsDescription stats_;
    public bool HasStats {
      get { return hasStats; }
    }
    public global::Jangada.StatsDescription Stats {
      get { return stats_ ?? global::Jangada.StatsDescription.DefaultInstance; }
    }
    
    public const int SkillsFieldNumber = 5;
    private pbc::PopsicleList<global::Jangada.SkillsDescription> skills_ = new pbc::PopsicleList<global::Jangada.SkillsDescription>();
    public scg::IList<global::Jangada.SkillsDescription> SkillsList {
      get { return skills_; }
    }
    public int SkillsCount {
      get { return skills_.Count; }
    }
    public global::Jangada.SkillsDescription GetSkills(int index) {
      return skills_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerGuid) return false;
        if (!hasPlayerPosition) return false;
        if (!hasPlayerRotation) return false;
        if (!hasStats) return false;
        if (!PlayerPosition.IsInitialized) return false;
        if (!PlayerRotation.IsInitialized) return false;
        if (!Stats.IsInitialized) return false;
        foreach (global::Jangada.SkillsDescription element in SkillsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerDescriptionFieldNames;
      if (hasPlayerGuid) {
        output.WriteString(1, field_names[0], PlayerGuid);
      }
      if (hasPlayerPosition) {
        output.WriteMessage(2, field_names[1], PlayerPosition);
      }
      if (hasPlayerRotation) {
        output.WriteMessage(3, field_names[2], PlayerRotation);
      }
      if (hasStats) {
        output.WriteMessage(4, field_names[4], Stats);
      }
      if (skills_.Count > 0) {
        output.WriteMessageArray(5, field_names[3], skills_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerGuid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerGuid);
        }
        if (hasPlayerPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, PlayerPosition);
        }
        if (hasPlayerRotation) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, PlayerRotation);
        }
        if (hasStats) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Stats);
        }
        foreach (global::Jangada.SkillsDescription element in SkillsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerDescription MakeReadOnly() {
      skills_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerDescription result;
      
      private PlayerDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerDescription original = result;
          result = new PlayerDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.PlayerDescription.Descriptor; }
      }
      
      public override PlayerDescription DefaultInstanceForType {
        get { return global::Jangada.PlayerDescription.DefaultInstance; }
      }
      
      public override PlayerDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerDescription) {
          return MergeFrom((PlayerDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerDescription other) {
        if (other == global::Jangada.PlayerDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        if (other.HasPlayerPosition) {
          MergePlayerPosition(other.PlayerPosition);
        }
        if (other.HasPlayerRotation) {
          MergePlayerRotation(other.PlayerRotation);
        }
        if (other.HasStats) {
          MergeStats(other.Stats);
        }
        if (other.skills_.Count != 0) {
          result.skills_.Add(other.skills_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerGuid = input.ReadString(ref result.playerGuid_);
              break;
            }
            case 18: {
              global::Jangada.Position.Builder subBuilder = global::Jangada.Position.CreateBuilder();
              if (result.hasPlayerPosition) {
                subBuilder.MergeFrom(PlayerPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerPosition = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Jangada.QuaternionMessage.Builder subBuilder = global::Jangada.QuaternionMessage.CreateBuilder();
              if (result.hasPlayerRotation) {
                subBuilder.MergeFrom(PlayerRotation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerRotation = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Jangada.StatsDescription.Builder subBuilder = global::Jangada.StatsDescription.CreateBuilder();
              if (result.hasStats) {
                subBuilder.MergeFrom(Stats);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Stats = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.skills_, global::Jangada.SkillsDescription.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public string PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = "";
        return this;
      }
      
      public bool HasPlayerPosition {
       get { return result.hasPlayerPosition; }
      }
      public global::Jangada.Position PlayerPosition {
        get { return result.PlayerPosition; }
        set { SetPlayerPosition(value); }
      }
      public Builder SetPlayerPosition(global::Jangada.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerPosition = true;
        result.playerPosition_ = value;
        return this;
      }
      public Builder SetPlayerPosition(global::Jangada.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerPosition = true;
        result.playerPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerPosition(global::Jangada.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerPosition &&
            result.playerPosition_ != global::Jangada.Position.DefaultInstance) {
            result.playerPosition_ = global::Jangada.Position.CreateBuilder(result.playerPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.playerPosition_ = value;
        }
        result.hasPlayerPosition = true;
        return this;
      }
      public Builder ClearPlayerPosition() {
        PrepareBuilder();
        result.hasPlayerPosition = false;
        result.playerPosition_ = null;
        return this;
      }
      
      public bool HasPlayerRotation {
       get { return result.hasPlayerRotation; }
      }
      public global::Jangada.QuaternionMessage PlayerRotation {
        get { return result.PlayerRotation; }
        set { SetPlayerRotation(value); }
      }
      public Builder SetPlayerRotation(global::Jangada.QuaternionMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerRotation = true;
        result.playerRotation_ = value;
        return this;
      }
      public Builder SetPlayerRotation(global::Jangada.QuaternionMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerRotation = true;
        result.playerRotation_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerRotation(global::Jangada.QuaternionMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerRotation &&
            result.playerRotation_ != global::Jangada.QuaternionMessage.DefaultInstance) {
            result.playerRotation_ = global::Jangada.QuaternionMessage.CreateBuilder(result.playerRotation_).MergeFrom(value).BuildPartial();
        } else {
          result.playerRotation_ = value;
        }
        result.hasPlayerRotation = true;
        return this;
      }
      public Builder ClearPlayerRotation() {
        PrepareBuilder();
        result.hasPlayerRotation = false;
        result.playerRotation_ = null;
        return this;
      }
      
      public bool HasStats {
       get { return result.hasStats; }
      }
      public global::Jangada.StatsDescription Stats {
        get { return result.Stats; }
        set { SetStats(value); }
      }
      public Builder SetStats(global::Jangada.StatsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStats = true;
        result.stats_ = value;
        return this;
      }
      public Builder SetStats(global::Jangada.StatsDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStats = true;
        result.stats_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStats(global::Jangada.StatsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStats &&
            result.stats_ != global::Jangada.StatsDescription.DefaultInstance) {
            result.stats_ = global::Jangada.StatsDescription.CreateBuilder(result.stats_).MergeFrom(value).BuildPartial();
        } else {
          result.stats_ = value;
        }
        result.hasStats = true;
        return this;
      }
      public Builder ClearStats() {
        PrepareBuilder();
        result.hasStats = false;
        result.stats_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Jangada.SkillsDescription> SkillsList {
        get { return PrepareBuilder().skills_; }
      }
      public int SkillsCount {
        get { return result.SkillsCount; }
      }
      public global::Jangada.SkillsDescription GetSkills(int index) {
        return result.GetSkills(index);
      }
      public Builder SetSkills(int index, global::Jangada.SkillsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skills_[index] = value;
        return this;
      }
      public Builder SetSkills(int index, global::Jangada.SkillsDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skills_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkills(global::Jangada.SkillsDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skills_.Add(value);
        return this;
      }
      public Builder AddSkills(global::Jangada.SkillsDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skills_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkills(scg::IEnumerable<global::Jangada.SkillsDescription> values) {
        PrepareBuilder();
        result.skills_.Add(values);
        return this;
      }
      public Builder ClearSkills() {
        PrepareBuilder();
        result.skills_.Clear();
        return this;
      }
    }
    static PlayerDescription() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StatsDescription : pb::GeneratedMessage<StatsDescription, StatsDescription.Builder> {
    private StatsDescription() { }
    private static readonly StatsDescription defaultInstance = new StatsDescription().MakeReadOnly();
    private static readonly string[] _statsDescriptionFieldNames = new string[] { "CONS", "DEX", "HP", "INT", "MP", "STR", "WIS" };
    private static readonly uint[] _statsDescriptionFieldTags = new uint[] { 8, 40, 48, 24, 56, 16, 32 };
    public static StatsDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StatsDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StatsDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_StatsDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StatsDescription, StatsDescription.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_StatsDescription__FieldAccessorTable; }
    }
    
    public const int CONSFieldNumber = 1;
    private bool hasCONS;
    private int cONS_;
    public bool HasCONS {
      get { return hasCONS; }
    }
    public int CONS {
      get { return cONS_; }
    }
    
    public const int STRFieldNumber = 2;
    private bool hasSTR;
    private int sTR_;
    public bool HasSTR {
      get { return hasSTR; }
    }
    public int STR {
      get { return sTR_; }
    }
    
    public const int INTFieldNumber = 3;
    private bool hasINT;
    private int iNT_;
    public bool HasINT {
      get { return hasINT; }
    }
    public int INT {
      get { return iNT_; }
    }
    
    public const int WISFieldNumber = 4;
    private bool hasWIS;
    private int wIS_;
    public bool HasWIS {
      get { return hasWIS; }
    }
    public int WIS {
      get { return wIS_; }
    }
    
    public const int DEXFieldNumber = 5;
    private bool hasDEX;
    private int dEX_;
    public bool HasDEX {
      get { return hasDEX; }
    }
    public int DEX {
      get { return dEX_; }
    }
    
    public const int HPFieldNumber = 6;
    private bool hasHP;
    private int hP_;
    public bool HasHP {
      get { return hasHP; }
    }
    public int HP {
      get { return hP_; }
    }
    
    public const int MPFieldNumber = 7;
    private bool hasMP;
    private int mP_;
    public bool HasMP {
      get { return hasMP; }
    }
    public int MP {
      get { return mP_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCONS) return false;
        if (!hasSTR) return false;
        if (!hasINT) return false;
        if (!hasWIS) return false;
        if (!hasDEX) return false;
        if (!hasHP) return false;
        if (!hasMP) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _statsDescriptionFieldNames;
      if (hasCONS) {
        output.WriteInt32(1, field_names[0], CONS);
      }
      if (hasSTR) {
        output.WriteInt32(2, field_names[5], STR);
      }
      if (hasINT) {
        output.WriteInt32(3, field_names[3], INT);
      }
      if (hasWIS) {
        output.WriteInt32(4, field_names[6], WIS);
      }
      if (hasDEX) {
        output.WriteInt32(5, field_names[1], DEX);
      }
      if (hasHP) {
        output.WriteInt32(6, field_names[2], HP);
      }
      if (hasMP) {
        output.WriteInt32(7, field_names[4], MP);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCONS) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, CONS);
        }
        if (hasSTR) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, STR);
        }
        if (hasINT) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, INT);
        }
        if (hasWIS) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, WIS);
        }
        if (hasDEX) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, DEX);
        }
        if (hasHP) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, HP);
        }
        if (hasMP) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, MP);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StatsDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatsDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatsDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatsDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatsDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatsDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StatsDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StatsDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StatsDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatsDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StatsDescription MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StatsDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StatsDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StatsDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StatsDescription result;
      
      private StatsDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          StatsDescription original = result;
          result = new StatsDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StatsDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.StatsDescription.Descriptor; }
      }
      
      public override StatsDescription DefaultInstanceForType {
        get { return global::Jangada.StatsDescription.DefaultInstance; }
      }
      
      public override StatsDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StatsDescription) {
          return MergeFrom((StatsDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StatsDescription other) {
        if (other == global::Jangada.StatsDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCONS) {
          CONS = other.CONS;
        }
        if (other.HasSTR) {
          STR = other.STR;
        }
        if (other.HasINT) {
          INT = other.INT;
        }
        if (other.HasWIS) {
          WIS = other.WIS;
        }
        if (other.HasDEX) {
          DEX = other.DEX;
        }
        if (other.HasHP) {
          HP = other.HP;
        }
        if (other.HasMP) {
          MP = other.MP;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_statsDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _statsDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCONS = input.ReadInt32(ref result.cONS_);
              break;
            }
            case 16: {
              result.hasSTR = input.ReadInt32(ref result.sTR_);
              break;
            }
            case 24: {
              result.hasINT = input.ReadInt32(ref result.iNT_);
              break;
            }
            case 32: {
              result.hasWIS = input.ReadInt32(ref result.wIS_);
              break;
            }
            case 40: {
              result.hasDEX = input.ReadInt32(ref result.dEX_);
              break;
            }
            case 48: {
              result.hasHP = input.ReadInt32(ref result.hP_);
              break;
            }
            case 56: {
              result.hasMP = input.ReadInt32(ref result.mP_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCONS {
        get { return result.hasCONS; }
      }
      public int CONS {
        get { return result.CONS; }
        set { SetCONS(value); }
      }
      public Builder SetCONS(int value) {
        PrepareBuilder();
        result.hasCONS = true;
        result.cONS_ = value;
        return this;
      }
      public Builder ClearCONS() {
        PrepareBuilder();
        result.hasCONS = false;
        result.cONS_ = 0;
        return this;
      }
      
      public bool HasSTR {
        get { return result.hasSTR; }
      }
      public int STR {
        get { return result.STR; }
        set { SetSTR(value); }
      }
      public Builder SetSTR(int value) {
        PrepareBuilder();
        result.hasSTR = true;
        result.sTR_ = value;
        return this;
      }
      public Builder ClearSTR() {
        PrepareBuilder();
        result.hasSTR = false;
        result.sTR_ = 0;
        return this;
      }
      
      public bool HasINT {
        get { return result.hasINT; }
      }
      public int INT {
        get { return result.INT; }
        set { SetINT(value); }
      }
      public Builder SetINT(int value) {
        PrepareBuilder();
        result.hasINT = true;
        result.iNT_ = value;
        return this;
      }
      public Builder ClearINT() {
        PrepareBuilder();
        result.hasINT = false;
        result.iNT_ = 0;
        return this;
      }
      
      public bool HasWIS {
        get { return result.hasWIS; }
      }
      public int WIS {
        get { return result.WIS; }
        set { SetWIS(value); }
      }
      public Builder SetWIS(int value) {
        PrepareBuilder();
        result.hasWIS = true;
        result.wIS_ = value;
        return this;
      }
      public Builder ClearWIS() {
        PrepareBuilder();
        result.hasWIS = false;
        result.wIS_ = 0;
        return this;
      }
      
      public bool HasDEX {
        get { return result.hasDEX; }
      }
      public int DEX {
        get { return result.DEX; }
        set { SetDEX(value); }
      }
      public Builder SetDEX(int value) {
        PrepareBuilder();
        result.hasDEX = true;
        result.dEX_ = value;
        return this;
      }
      public Builder ClearDEX() {
        PrepareBuilder();
        result.hasDEX = false;
        result.dEX_ = 0;
        return this;
      }
      
      public bool HasHP {
        get { return result.hasHP; }
      }
      public int HP {
        get { return result.HP; }
        set { SetHP(value); }
      }
      public Builder SetHP(int value) {
        PrepareBuilder();
        result.hasHP = true;
        result.hP_ = value;
        return this;
      }
      public Builder ClearHP() {
        PrepareBuilder();
        result.hasHP = false;
        result.hP_ = 0;
        return this;
      }
      
      public bool HasMP {
        get { return result.hasMP; }
      }
      public int MP {
        get { return result.MP; }
        set { SetMP(value); }
      }
      public Builder SetMP(int value) {
        PrepareBuilder();
        result.hasMP = true;
        result.mP_ = value;
        return this;
      }
      public Builder ClearMP() {
        PrepareBuilder();
        result.hasMP = false;
        result.mP_ = 0;
        return this;
      }
    }
    static StatsDescription() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SkillsDescription : pb::GeneratedMessage<SkillsDescription, SkillsDescription.Builder> {
    private SkillsDescription() { }
    private static readonly SkillsDescription defaultInstance = new SkillsDescription().MakeReadOnly();
    private static readonly string[] _skillsDescriptionFieldNames = new string[] { "AutoCast", "CoolDown", "Distance", "Name", "TextureId" };
    private static readonly uint[] _skillsDescriptionFieldTags = new uint[] { 40, 29, 37, 10, 16 };
    public static SkillsDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillsDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillsDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_SkillsDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillsDescription, SkillsDescription.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_SkillsDescription__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TextureIdFieldNumber = 2;
    private bool hasTextureId;
    private int textureId_;
    public bool HasTextureId {
      get { return hasTextureId; }
    }
    public int TextureId {
      get { return textureId_; }
    }
    
    public const int CoolDownFieldNumber = 3;
    private bool hasCoolDown;
    private float coolDown_;
    public bool HasCoolDown {
      get { return hasCoolDown; }
    }
    public float CoolDown {
      get { return coolDown_; }
    }
    
    public const int DistanceFieldNumber = 4;
    private bool hasDistance;
    private float distance_;
    public bool HasDistance {
      get { return hasDistance; }
    }
    public float Distance {
      get { return distance_; }
    }
    
    public const int AutoCastFieldNumber = 5;
    private bool hasAutoCast;
    private bool autoCast_;
    public bool HasAutoCast {
      get { return hasAutoCast; }
    }
    public bool AutoCast {
      get { return autoCast_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasTextureId) return false;
        if (!hasCoolDown) return false;
        if (!hasDistance) return false;
        if (!hasAutoCast) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillsDescriptionFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasTextureId) {
        output.WriteInt32(2, field_names[4], TextureId);
      }
      if (hasCoolDown) {
        output.WriteFloat(3, field_names[1], CoolDown);
      }
      if (hasDistance) {
        output.WriteFloat(4, field_names[2], Distance);
      }
      if (hasAutoCast) {
        output.WriteBool(5, field_names[0], AutoCast);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasTextureId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, TextureId);
        }
        if (hasCoolDown) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, CoolDown);
        }
        if (hasDistance) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Distance);
        }
        if (hasAutoCast) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, AutoCast);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillsDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillsDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillsDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillsDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillsDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillsDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillsDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillsDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillsDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillsDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillsDescription MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillsDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillsDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillsDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillsDescription result;
      
      private SkillsDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillsDescription original = result;
          result = new SkillsDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillsDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.SkillsDescription.Descriptor; }
      }
      
      public override SkillsDescription DefaultInstanceForType {
        get { return global::Jangada.SkillsDescription.DefaultInstance; }
      }
      
      public override SkillsDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillsDescription) {
          return MergeFrom((SkillsDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillsDescription other) {
        if (other == global::Jangada.SkillsDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTextureId) {
          TextureId = other.TextureId;
        }
        if (other.HasCoolDown) {
          CoolDown = other.CoolDown;
        }
        if (other.HasDistance) {
          Distance = other.Distance;
        }
        if (other.HasAutoCast) {
          AutoCast = other.AutoCast;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillsDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillsDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasTextureId = input.ReadInt32(ref result.textureId_);
              break;
            }
            case 29: {
              result.hasCoolDown = input.ReadFloat(ref result.coolDown_);
              break;
            }
            case 37: {
              result.hasDistance = input.ReadFloat(ref result.distance_);
              break;
            }
            case 40: {
              result.hasAutoCast = input.ReadBool(ref result.autoCast_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTextureId {
        get { return result.hasTextureId; }
      }
      public int TextureId {
        get { return result.TextureId; }
        set { SetTextureId(value); }
      }
      public Builder SetTextureId(int value) {
        PrepareBuilder();
        result.hasTextureId = true;
        result.textureId_ = value;
        return this;
      }
      public Builder ClearTextureId() {
        PrepareBuilder();
        result.hasTextureId = false;
        result.textureId_ = 0;
        return this;
      }
      
      public bool HasCoolDown {
        get { return result.hasCoolDown; }
      }
      public float CoolDown {
        get { return result.CoolDown; }
        set { SetCoolDown(value); }
      }
      public Builder SetCoolDown(float value) {
        PrepareBuilder();
        result.hasCoolDown = true;
        result.coolDown_ = value;
        return this;
      }
      public Builder ClearCoolDown() {
        PrepareBuilder();
        result.hasCoolDown = false;
        result.coolDown_ = 0F;
        return this;
      }
      
      public bool HasDistance {
        get { return result.hasDistance; }
      }
      public float Distance {
        get { return result.Distance; }
        set { SetDistance(value); }
      }
      public Builder SetDistance(float value) {
        PrepareBuilder();
        result.hasDistance = true;
        result.distance_ = value;
        return this;
      }
      public Builder ClearDistance() {
        PrepareBuilder();
        result.hasDistance = false;
        result.distance_ = 0F;
        return this;
      }
      
      public bool HasAutoCast {
        get { return result.hasAutoCast; }
      }
      public bool AutoCast {
        get { return result.AutoCast; }
        set { SetAutoCast(value); }
      }
      public Builder SetAutoCast(bool value) {
        PrepareBuilder();
        result.hasAutoCast = true;
        result.autoCast_ = value;
        return this;
      }
      public Builder ClearAutoCast() {
        PrepareBuilder();
        result.hasAutoCast = false;
        result.autoCast_ = false;
        return this;
      }
    }
    static SkillsDescription() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerLoginPacket : pb::GeneratedMessage<PlayerLoginPacket, PlayerLoginPacket.Builder> {
    private PlayerLoginPacket() { }
    private static readonly PlayerLoginPacket defaultInstance = new PlayerLoginPacket().MakeReadOnly();
    private static readonly string[] _playerLoginPacketFieldNames = new string[] { "player" };
    private static readonly uint[] _playerLoginPacketFieldTags = new uint[] { 10 };
    public static PlayerLoginPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerLoginPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerLoginPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerLoginPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerLoginPacket, PlayerLoginPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerLoginPacket__FieldAccessorTable; }
    }
    
    public const int PlayerFieldNumber = 1;
    private bool hasPlayer;
    private global::Jangada.PlayerDescription player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::Jangada.PlayerDescription Player {
      get { return player_ ?? global::Jangada.PlayerDescription.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayer) return false;
        if (!Player.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerLoginPacketFieldNames;
      if (hasPlayer) {
        output.WriteMessage(1, field_names[0], Player);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayer) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerLoginPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerLoginPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerLoginPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerLoginPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerLoginPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerLoginPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerLoginPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerLoginPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerLoginPacket result;
      
      private PlayerLoginPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerLoginPacket original = result;
          result = new PlayerLoginPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerLoginPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.PlayerLoginPacket.Descriptor; }
      }
      
      public override PlayerLoginPacket DefaultInstanceForType {
        get { return global::Jangada.PlayerLoginPacket.DefaultInstance; }
      }
      
      public override PlayerLoginPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerLoginPacket) {
          return MergeFrom((PlayerLoginPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerLoginPacket other) {
        if (other == global::Jangada.PlayerLoginPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerLoginPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerLoginPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Jangada.PlayerDescription.Builder subBuilder = global::Jangada.PlayerDescription.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::Jangada.PlayerDescription Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::Jangada.PlayerDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer &&
            result.player_ != global::Jangada.PlayerDescription.DefaultInstance) {
            result.player_ = global::Jangada.PlayerDescription.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
        }
        result.hasPlayer = true;
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
    }
    static PlayerLoginPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerMovementPacket : pb::GeneratedMessage<PlayerMovementPacket, PlayerMovementPacket.Builder> {
    private PlayerMovementPacket() { }
    private static readonly PlayerMovementPacket defaultInstance = new PlayerMovementPacket().MakeReadOnly();
    private static readonly string[] _playerMovementPacketFieldNames = new string[] { "newPosition", "newRotation" };
    private static readonly uint[] _playerMovementPacketFieldTags = new uint[] { 10, 18 };
    public static PlayerMovementPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerMovementPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerMovementPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerMovementPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerMovementPacket, PlayerMovementPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerMovementPacket__FieldAccessorTable; }
    }
    
    public const int NewPositionFieldNumber = 1;
    private bool hasNewPosition;
    private global::Jangada.Position newPosition_;
    public bool HasNewPosition {
      get { return hasNewPosition; }
    }
    public global::Jangada.Position NewPosition {
      get { return newPosition_ ?? global::Jangada.Position.DefaultInstance; }
    }
    
    public const int NewRotationFieldNumber = 2;
    private bool hasNewRotation;
    private global::Jangada.QuaternionMessage newRotation_;
    public bool HasNewRotation {
      get { return hasNewRotation; }
    }
    public global::Jangada.QuaternionMessage NewRotation {
      get { return newRotation_ ?? global::Jangada.QuaternionMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNewPosition) return false;
        if (!hasNewRotation) return false;
        if (!NewPosition.IsInitialized) return false;
        if (!NewRotation.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerMovementPacketFieldNames;
      if (hasNewPosition) {
        output.WriteMessage(1, field_names[0], NewPosition);
      }
      if (hasNewRotation) {
        output.WriteMessage(2, field_names[1], NewRotation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNewPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, NewPosition);
        }
        if (hasNewRotation) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, NewRotation);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerMovementPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerMovementPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerMovementPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerMovementPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerMovementPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerMovementPacket result;
      
      private PlayerMovementPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerMovementPacket original = result;
          result = new PlayerMovementPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerMovementPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.PlayerMovementPacket.Descriptor; }
      }
      
      public override PlayerMovementPacket DefaultInstanceForType {
        get { return global::Jangada.PlayerMovementPacket.DefaultInstance; }
      }
      
      public override PlayerMovementPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerMovementPacket) {
          return MergeFrom((PlayerMovementPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerMovementPacket other) {
        if (other == global::Jangada.PlayerMovementPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNewPosition) {
          MergeNewPosition(other.NewPosition);
        }
        if (other.HasNewRotation) {
          MergeNewRotation(other.NewRotation);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerMovementPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Jangada.Position.Builder subBuilder = global::Jangada.Position.CreateBuilder();
              if (result.hasNewPosition) {
                subBuilder.MergeFrom(NewPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewPosition = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Jangada.QuaternionMessage.Builder subBuilder = global::Jangada.QuaternionMessage.CreateBuilder();
              if (result.hasNewRotation) {
                subBuilder.MergeFrom(NewRotation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewRotation = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNewPosition {
       get { return result.hasNewPosition; }
      }
      public global::Jangada.Position NewPosition {
        get { return result.NewPosition; }
        set { SetNewPosition(value); }
      }
      public Builder SetNewPosition(global::Jangada.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewPosition = true;
        result.newPosition_ = value;
        return this;
      }
      public Builder SetNewPosition(global::Jangada.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewPosition = true;
        result.newPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewPosition(global::Jangada.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewPosition &&
            result.newPosition_ != global::Jangada.Position.DefaultInstance) {
            result.newPosition_ = global::Jangada.Position.CreateBuilder(result.newPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.newPosition_ = value;
        }
        result.hasNewPosition = true;
        return this;
      }
      public Builder ClearNewPosition() {
        PrepareBuilder();
        result.hasNewPosition = false;
        result.newPosition_ = null;
        return this;
      }
      
      public bool HasNewRotation {
       get { return result.hasNewRotation; }
      }
      public global::Jangada.QuaternionMessage NewRotation {
        get { return result.NewRotation; }
        set { SetNewRotation(value); }
      }
      public Builder SetNewRotation(global::Jangada.QuaternionMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewRotation = true;
        result.newRotation_ = value;
        return this;
      }
      public Builder SetNewRotation(global::Jangada.QuaternionMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewRotation = true;
        result.newRotation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewRotation(global::Jangada.QuaternionMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewRotation &&
            result.newRotation_ != global::Jangada.QuaternionMessage.DefaultInstance) {
            result.newRotation_ = global::Jangada.QuaternionMessage.CreateBuilder(result.newRotation_).MergeFrom(value).BuildPartial();
        } else {
          result.newRotation_ = value;
        }
        result.hasNewRotation = true;
        return this;
      }
      public Builder ClearNewRotation() {
        PrepareBuilder();
        result.hasNewRotation = false;
        result.newRotation_ = null;
        return this;
      }
    }
    static PlayerMovementPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CharacterMovementPacket : pb::GeneratedMessage<CharacterMovementPacket, CharacterMovementPacket.Builder> {
    private CharacterMovementPacket() { }
    private static readonly CharacterMovementPacket defaultInstance = new CharacterMovementPacket().MakeReadOnly();
    private static readonly string[] _characterMovementPacketFieldNames = new string[] { "player" };
    private static readonly uint[] _characterMovementPacketFieldTags = new uint[] { 10 };
    public static CharacterMovementPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CharacterMovementPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CharacterMovementPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CharacterMovementPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CharacterMovementPacket, CharacterMovementPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_CharacterMovementPacket__FieldAccessorTable; }
    }
    
    public const int PlayerFieldNumber = 1;
    private bool hasPlayer;
    private global::Jangada.PlayerDescription player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::Jangada.PlayerDescription Player {
      get { return player_ ?? global::Jangada.PlayerDescription.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayer) return false;
        if (!Player.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _characterMovementPacketFieldNames;
      if (hasPlayer) {
        output.WriteMessage(1, field_names[0], Player);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayer) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CharacterMovementPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CharacterMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CharacterMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharacterMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CharacterMovementPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CharacterMovementPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CharacterMovementPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CharacterMovementPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CharacterMovementPacket result;
      
      private CharacterMovementPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          CharacterMovementPacket original = result;
          result = new CharacterMovementPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CharacterMovementPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.CharacterMovementPacket.Descriptor; }
      }
      
      public override CharacterMovementPacket DefaultInstanceForType {
        get { return global::Jangada.CharacterMovementPacket.DefaultInstance; }
      }
      
      public override CharacterMovementPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CharacterMovementPacket) {
          return MergeFrom((CharacterMovementPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CharacterMovementPacket other) {
        if (other == global::Jangada.CharacterMovementPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_characterMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _characterMovementPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Jangada.PlayerDescription.Builder subBuilder = global::Jangada.PlayerDescription.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::Jangada.PlayerDescription Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::Jangada.PlayerDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::Jangada.PlayerDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer &&
            result.player_ != global::Jangada.PlayerDescription.DefaultInstance) {
            result.player_ = global::Jangada.PlayerDescription.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
        }
        result.hasPlayer = true;
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
    }
    static CharacterMovementPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Messages : pb::GeneratedMessage<Messages, Messages.Builder> {
    private Messages() { }
    private static readonly Messages defaultInstance = new Messages().MakeReadOnly();
    private static readonly string[] _messagesFieldNames = new string[] { "Networkmessage" };
    private static readonly uint[] _messagesFieldTags = new uint[] { 10 };
    public static Messages DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Messages DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Messages ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Messages__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Messages, Messages.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_Messages__FieldAccessorTable; }
    }
    
    public const int NetworkmessageFieldNumber = 1;
    private pbc::PopsicleList<global::Jangada.Networkmessage> networkmessage_ = new pbc::PopsicleList<global::Jangada.Networkmessage>();
    public scg::IList<global::Jangada.Networkmessage> NetworkmessageList {
      get { return networkmessage_; }
    }
    public int NetworkmessageCount {
      get { return networkmessage_.Count; }
    }
    public global::Jangada.Networkmessage GetNetworkmessage(int index) {
      return networkmessage_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Jangada.Networkmessage element in NetworkmessageList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messagesFieldNames;
      if (networkmessage_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], networkmessage_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Jangada.Networkmessage element in NetworkmessageList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Messages ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Messages ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Messages ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Messages ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Messages ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Messages ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Messages ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Messages ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Messages ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Messages ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Messages MakeReadOnly() {
      networkmessage_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Messages prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Messages, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Messages cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Messages result;
      
      private Messages PrepareBuilder() {
        if (resultIsReadOnly) {
          Messages original = result;
          result = new Messages();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Messages MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.Messages.Descriptor; }
      }
      
      public override Messages DefaultInstanceForType {
        get { return global::Jangada.Messages.DefaultInstance; }
      }
      
      public override Messages BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Messages) {
          return MergeFrom((Messages) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Messages other) {
        if (other == global::Jangada.Messages.DefaultInstance) return this;
        PrepareBuilder();
        if (other.networkmessage_.Count != 0) {
          result.networkmessage_.Add(other.networkmessage_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messagesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messagesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.networkmessage_, global::Jangada.Networkmessage.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Jangada.Networkmessage> NetworkmessageList {
        get { return PrepareBuilder().networkmessage_; }
      }
      public int NetworkmessageCount {
        get { return result.NetworkmessageCount; }
      }
      public global::Jangada.Networkmessage GetNetworkmessage(int index) {
        return result.GetNetworkmessage(index);
      }
      public Builder SetNetworkmessage(int index, global::Jangada.Networkmessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.networkmessage_[index] = value;
        return this;
      }
      public Builder SetNetworkmessage(int index, global::Jangada.Networkmessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.networkmessage_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNetworkmessage(global::Jangada.Networkmessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.networkmessage_.Add(value);
        return this;
      }
      public Builder AddNetworkmessage(global::Jangada.Networkmessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.networkmessage_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNetworkmessage(scg::IEnumerable<global::Jangada.Networkmessage> values) {
        PrepareBuilder();
        result.networkmessage_.Add(values);
        return this;
      }
      public Builder ClearNetworkmessage() {
        PrepareBuilder();
        result.networkmessage_.Clear();
        return this;
      }
    }
    static Messages() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerLogoutPacket : pb::GeneratedMessage<PlayerLogoutPacket, PlayerLogoutPacket.Builder> {
    private PlayerLogoutPacket() { }
    private static readonly PlayerLogoutPacket defaultInstance = new PlayerLogoutPacket().MakeReadOnly();
    private static readonly string[] _playerLogoutPacketFieldNames = new string[] { "playerGuid" };
    private static readonly uint[] _playerLogoutPacketFieldTags = new uint[] { 10 };
    public static PlayerLogoutPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerLogoutPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerLogoutPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerLogoutPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerLogoutPacket, PlayerLogoutPacket.Builder> InternalFieldAccessors {
      get { return global::Jangada.Proto.Networkmessage.internal__static_Jangada_PlayerLogoutPacket__FieldAccessorTable; }
    }
    
    public const int PlayerGuidFieldNumber = 1;
    private bool hasPlayerGuid;
    private string playerGuid_ = "";
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public string PlayerGuid {
      get { return playerGuid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerGuid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerLogoutPacketFieldNames;
      if (hasPlayerGuid) {
        output.WriteString(1, field_names[0], PlayerGuid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerGuid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerGuid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerLogoutPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerLogoutPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerLogoutPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerLogoutPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerLogoutPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerLogoutPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerLogoutPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerLogoutPacket result;
      
      private PlayerLogoutPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerLogoutPacket original = result;
          result = new PlayerLogoutPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerLogoutPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Jangada.PlayerLogoutPacket.Descriptor; }
      }
      
      public override PlayerLogoutPacket DefaultInstanceForType {
        get { return global::Jangada.PlayerLogoutPacket.DefaultInstance; }
      }
      
      public override PlayerLogoutPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerLogoutPacket) {
          return MergeFrom((PlayerLogoutPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerLogoutPacket other) {
        if (other == global::Jangada.PlayerLogoutPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerLogoutPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerLogoutPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerGuid = input.ReadString(ref result.playerGuid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public string PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = "";
        return this;
      }
    }
    static PlayerLogoutPacket() {
      object.ReferenceEquals(global::Jangada.Proto.Networkmessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
